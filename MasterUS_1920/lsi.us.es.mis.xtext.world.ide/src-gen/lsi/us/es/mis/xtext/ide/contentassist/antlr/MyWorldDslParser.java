/*
 * generated by Xtext 2.21.0
 */
package lsi.us.es.mis.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import lsi.us.es.mis.xtext.ide.contentassist.antlr.internal.InternalMyWorldDslParser;
import lsi.us.es.mis.xtext.services.MyWorldDslGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MyWorldDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyWorldDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyWorldDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSpaceAccess().getAlternatives(), "rule__Space__Alternatives");
			builder.put(grammarAccess.getWaterAccess().getAlternatives(), "rule__Water__Alternatives");
			builder.put(grammarAccess.getOceanAccess().getGroup(), "rule__Ocean__Group__0");
			builder.put(grammarAccess.getLakeAccess().getGroup(), "rule__Lake__Group__0");
			builder.put(grammarAccess.getSeaAccess().getGroup(), "rule__Sea__Group__0");
			builder.put(grammarAccess.getContinentAccess().getGroup(), "rule__Continent__Group__0");
			builder.put(grammarAccess.getCountryAccess().getGroup(), "rule__Country__Group__0");
			builder.put(grammarAccess.getCountryAccess().getGroup_8(), "rule__Country__Group_8__0");
			builder.put(grammarAccess.getCountryAccess().getGroup_9(), "rule__Country__Group_9__0");
			builder.put(grammarAccess.getWorldAccess().getSpacesAssignment(), "rule__World__SpacesAssignment");
			builder.put(grammarAccess.getOceanAccess().getNameAssignment_1(), "rule__Ocean__NameAssignment_1");
			builder.put(grammarAccess.getOceanAccess().getAreaAssignment_4(), "rule__Ocean__AreaAssignment_4");
			builder.put(grammarAccess.getOceanAccess().getCkAssignment_6(), "rule__Ocean__CkAssignment_6");
			builder.put(grammarAccess.getLakeAccess().getNameAssignment_1(), "rule__Lake__NameAssignment_1");
			builder.put(grammarAccess.getLakeAccess().getAreaAssignment_4(), "rule__Lake__AreaAssignment_4");
			builder.put(grammarAccess.getLakeAccess().getCkAssignment_6(), "rule__Lake__CkAssignment_6");
			builder.put(grammarAccess.getSeaAccess().getNameAssignment_1(), "rule__Sea__NameAssignment_1");
			builder.put(grammarAccess.getSeaAccess().getAreaAssignment_4(), "rule__Sea__AreaAssignment_4");
			builder.put(grammarAccess.getSeaAccess().getCkAssignment_6(), "rule__Sea__CkAssignment_6");
			builder.put(grammarAccess.getContinentAccess().getNameAssignment_1(), "rule__Continent__NameAssignment_1");
			builder.put(grammarAccess.getContinentAccess().getAreaAssignment_4(), "rule__Continent__AreaAssignment_4");
			builder.put(grammarAccess.getContinentAccess().getCountriesAssignment_5(), "rule__Continent__CountriesAssignment_5");
			builder.put(grammarAccess.getCountryAccess().getNameAssignment_1(), "rule__Country__NameAssignment_1");
			builder.put(grammarAccess.getCountryAccess().getAreaAssignment_4(), "rule__Country__AreaAssignment_4");
			builder.put(grammarAccess.getCountryAccess().getPeacefulAssignment_5(), "rule__Country__PeacefulAssignment_5");
			builder.put(grammarAccess.getCountryAccess().getPopulationAssignment_7(), "rule__Country__PopulationAssignment_7");
			builder.put(grammarAccess.getCountryAccess().getBordersAssignment_8_1(), "rule__Country__BordersAssignment_8_1");
			builder.put(grammarAccess.getCountryAccess().getWashedByAssignment_9_1(), "rule__Country__WashedByAssignment_9_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyWorldDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyWorldDslParser createParser() {
		InternalMyWorldDslParser result = new InternalMyWorldDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyWorldDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyWorldDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
