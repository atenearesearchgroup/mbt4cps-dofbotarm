/*
 * generated by Xtext 2.21.0
 */
grammar InternalMyWorldDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package lsi.us.es.mis.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package lsi.us.es.mis.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import lsi.us.es.mis.xtext.services.MyWorldDslGrammarAccess;

}
@parser::members {
	private MyWorldDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyWorldDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleWorld
entryRuleWorld
:
{ before(grammarAccess.getWorldRule()); }
	 ruleWorld
{ after(grammarAccess.getWorldRule()); } 
	 EOF 
;

// Rule World
ruleWorld 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getWorldAccess().getSpacesAssignment()); }
			(rule__World__SpacesAssignment)
			{ after(grammarAccess.getWorldAccess().getSpacesAssignment()); }
		)
		(
			{ before(grammarAccess.getWorldAccess().getSpacesAssignment()); }
			(rule__World__SpacesAssignment)*
			{ after(grammarAccess.getWorldAccess().getSpacesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpace
entryRuleSpace
:
{ before(grammarAccess.getSpaceRule()); }
	 ruleSpace
{ after(grammarAccess.getSpaceRule()); } 
	 EOF 
;

// Rule Space
ruleSpace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpaceAccess().getAlternatives()); }
		(rule__Space__Alternatives)
		{ after(grammarAccess.getSpaceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWater
entryRuleWater
:
{ before(grammarAccess.getWaterRule()); }
	 ruleWater
{ after(grammarAccess.getWaterRule()); } 
	 EOF 
;

// Rule Water
ruleWater 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaterAccess().getAlternatives()); }
		(rule__Water__Alternatives)
		{ after(grammarAccess.getWaterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOcean
entryRuleOcean
:
{ before(grammarAccess.getOceanRule()); }
	 ruleOcean
{ after(grammarAccess.getOceanRule()); } 
	 EOF 
;

// Rule Ocean
ruleOcean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOceanAccess().getGroup()); }
		(rule__Ocean__Group__0)
		{ after(grammarAccess.getOceanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLake
entryRuleLake
:
{ before(grammarAccess.getLakeRule()); }
	 ruleLake
{ after(grammarAccess.getLakeRule()); } 
	 EOF 
;

// Rule Lake
ruleLake 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLakeAccess().getGroup()); }
		(rule__Lake__Group__0)
		{ after(grammarAccess.getLakeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSea
entryRuleSea
:
{ before(grammarAccess.getSeaRule()); }
	 ruleSea
{ after(grammarAccess.getSeaRule()); } 
	 EOF 
;

// Rule Sea
ruleSea 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSeaAccess().getGroup()); }
		(rule__Sea__Group__0)
		{ after(grammarAccess.getSeaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContinent
entryRuleContinent
:
{ before(grammarAccess.getContinentRule()); }
	 ruleContinent
{ after(grammarAccess.getContinentRule()); } 
	 EOF 
;

// Rule Continent
ruleContinent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContinentAccess().getGroup()); }
		(rule__Continent__Group__0)
		{ after(grammarAccess.getContinentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCountry
entryRuleCountry
:
{ before(grammarAccess.getCountryRule()); }
	 ruleCountry
{ after(grammarAccess.getCountryRule()); } 
	 EOF 
;

// Rule Country
ruleCountry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCountryAccess().getGroup()); }
		(rule__Country__Group__0)
		{ after(grammarAccess.getCountryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpaceAccess().getContinentParserRuleCall_0()); }
		ruleContinent
		{ after(grammarAccess.getSpaceAccess().getContinentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSpaceAccess().getWaterParserRuleCall_1()); }
		ruleWater
		{ after(grammarAccess.getSpaceAccess().getWaterParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Water__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaterAccess().getOceanParserRuleCall_0()); }
		ruleOcean
		{ after(grammarAccess.getWaterAccess().getOceanParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWaterAccess().getLakeParserRuleCall_1()); }
		ruleLake
		{ after(grammarAccess.getWaterAccess().getLakeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getWaterAccess().getSeaParserRuleCall_2()); }
		ruleSea
		{ after(grammarAccess.getWaterAccess().getSeaParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__0__Impl
	rule__Ocean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getOceanKeyword_0()); }
	'Ocean'
	{ after(grammarAccess.getOceanAccess().getOceanKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__1__Impl
	rule__Ocean__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getNameAssignment_1()); }
	(rule__Ocean__NameAssignment_1)
	{ after(grammarAccess.getOceanAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__2__Impl
	rule__Ocean__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getOceanAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__3__Impl
	rule__Ocean__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getAreaSqKmKeyword_3()); }
	'area (sq km):'
	{ after(grammarAccess.getOceanAccess().getAreaSqKmKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__4__Impl
	rule__Ocean__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getAreaAssignment_4()); }
	(rule__Ocean__AreaAssignment_4)
	{ after(grammarAccess.getOceanAccess().getAreaAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__5__Impl
	rule__Ocean__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getVolumeCuKmKeyword_5()); }
	'volume (cu km):'
	{ after(grammarAccess.getOceanAccess().getVolumeCuKmKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__6__Impl
	rule__Ocean__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getCkAssignment_6()); }
	(rule__Ocean__CkAssignment_6)
	{ after(grammarAccess.getOceanAccess().getCkAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ocean__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOceanAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getOceanAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lake__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__0__Impl
	rule__Lake__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getLakeKeyword_0()); }
	'Lake'
	{ after(grammarAccess.getLakeAccess().getLakeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__1__Impl
	rule__Lake__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getNameAssignment_1()); }
	(rule__Lake__NameAssignment_1)
	{ after(grammarAccess.getLakeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__2__Impl
	rule__Lake__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getLakeAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__3__Impl
	rule__Lake__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getAreaSqKmKeyword_3()); }
	'area (sq km):'
	{ after(grammarAccess.getLakeAccess().getAreaSqKmKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__4__Impl
	rule__Lake__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getAreaAssignment_4()); }
	(rule__Lake__AreaAssignment_4)
	{ after(grammarAccess.getLakeAccess().getAreaAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__5__Impl
	rule__Lake__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getVolumeCuKmKeyword_5()); }
	'volume (cu km):'
	{ after(grammarAccess.getLakeAccess().getVolumeCuKmKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__6__Impl
	rule__Lake__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getCkAssignment_6()); }
	(rule__Lake__CkAssignment_6)
	{ after(grammarAccess.getLakeAccess().getCkAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lake__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLakeAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getLakeAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sea__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__0__Impl
	rule__Sea__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getSeaKeyword_0()); }
	'Sea'
	{ after(grammarAccess.getSeaAccess().getSeaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__1__Impl
	rule__Sea__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getNameAssignment_1()); }
	(rule__Sea__NameAssignment_1)
	{ after(grammarAccess.getSeaAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__2__Impl
	rule__Sea__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSeaAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__3__Impl
	rule__Sea__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getAreaSqKmKeyword_3()); }
	'area (sq km):'
	{ after(grammarAccess.getSeaAccess().getAreaSqKmKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__4__Impl
	rule__Sea__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getAreaAssignment_4()); }
	(rule__Sea__AreaAssignment_4)
	{ after(grammarAccess.getSeaAccess().getAreaAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__5__Impl
	rule__Sea__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getVolumeCuKmKeyword_5()); }
	'volume (cu km):'
	{ after(grammarAccess.getSeaAccess().getVolumeCuKmKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__6__Impl
	rule__Sea__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getCkAssignment_6()); }
	(rule__Sea__CkAssignment_6)
	{ after(grammarAccess.getSeaAccess().getCkAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sea__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeaAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getSeaAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Continent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continent__Group__0__Impl
	rule__Continent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinentAccess().getContinentKeyword_0()); }
	'Continent'
	{ after(grammarAccess.getContinentAccess().getContinentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continent__Group__1__Impl
	rule__Continent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinentAccess().getNameAssignment_1()); }
	(rule__Continent__NameAssignment_1)
	{ after(grammarAccess.getContinentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continent__Group__2__Impl
	rule__Continent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinentAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getContinentAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continent__Group__3__Impl
	rule__Continent__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinentAccess().getAreaSqKmKeyword_3()); }
	'area (sq km):'
	{ after(grammarAccess.getContinentAccess().getAreaSqKmKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continent__Group__4__Impl
	rule__Continent__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinentAccess().getAreaAssignment_4()); }
	(rule__Continent__AreaAssignment_4)
	{ after(grammarAccess.getContinentAccess().getAreaAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continent__Group__5__Impl
	rule__Continent__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getContinentAccess().getCountriesAssignment_5()); }
		(rule__Continent__CountriesAssignment_5)
		{ after(grammarAccess.getContinentAccess().getCountriesAssignment_5()); }
	)
	(
		{ before(grammarAccess.getContinentAccess().getCountriesAssignment_5()); }
		(rule__Continent__CountriesAssignment_5)*
		{ after(grammarAccess.getContinentAccess().getCountriesAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continent__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinentAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getContinentAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Country__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__0__Impl
	rule__Country__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getCountryKeyword_0()); }
	'Country'
	{ after(grammarAccess.getCountryAccess().getCountryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__1__Impl
	rule__Country__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getNameAssignment_1()); }
	(rule__Country__NameAssignment_1)
	{ after(grammarAccess.getCountryAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__2__Impl
	rule__Country__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getCountryAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__3__Impl
	rule__Country__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getAreaSqKmKeyword_3()); }
	'area (sq km):'
	{ after(grammarAccess.getCountryAccess().getAreaSqKmKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__4__Impl
	rule__Country__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getAreaAssignment_4()); }
	(rule__Country__AreaAssignment_4)
	{ after(grammarAccess.getCountryAccess().getAreaAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__5__Impl
	rule__Country__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getPeacefulAssignment_5()); }
	(rule__Country__PeacefulAssignment_5)?
	{ after(grammarAccess.getCountryAccess().getPeacefulAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__6__Impl
	rule__Country__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getPopulationKeyword_6()); }
	'population:'
	{ after(grammarAccess.getCountryAccess().getPopulationKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__7__Impl
	rule__Country__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getPopulationAssignment_7()); }
	(rule__Country__PopulationAssignment_7)
	{ after(grammarAccess.getCountryAccess().getPopulationAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__8__Impl
	rule__Country__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getGroup_8()); }
	(rule__Country__Group_8__0)?
	{ after(grammarAccess.getCountryAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__9__Impl
	rule__Country__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getGroup_9()); }
	(rule__Country__Group_9__0)*
	{ after(grammarAccess.getCountryAccess().getGroup_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getCountryAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Country__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group_8__0__Impl
	rule__Country__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getBordersKeyword_8_0()); }
	'borders:'
	{ after(grammarAccess.getCountryAccess().getBordersKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCountryAccess().getBordersAssignment_8_1()); }
		(rule__Country__BordersAssignment_8_1)
		{ after(grammarAccess.getCountryAccess().getBordersAssignment_8_1()); }
	)
	(
		{ before(grammarAccess.getCountryAccess().getBordersAssignment_8_1()); }
		(rule__Country__BordersAssignment_8_1)*
		{ after(grammarAccess.getCountryAccess().getBordersAssignment_8_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Country__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group_9__0__Impl
	rule__Country__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getWashedByKeyword_9_0()); }
	'washedBy:'
	{ after(grammarAccess.getCountryAccess().getWashedByKeyword_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Country__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountryAccess().getWashedByAssignment_9_1()); }
	(rule__Country__WashedByAssignment_9_1)*
	{ after(grammarAccess.getCountryAccess().getWashedByAssignment_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__World__SpacesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getSpacesSpaceParserRuleCall_0()); }
		ruleSpace
		{ after(grammarAccess.getWorldAccess().getSpacesSpaceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOceanAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getOceanAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__AreaAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOceanAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getOceanAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ocean__CkAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOceanAccess().getCkDOUBLETerminalRuleCall_6_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getOceanAccess().getCkDOUBLETerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLakeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLakeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__AreaAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLakeAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getLakeAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lake__CkAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLakeAccess().getCkDOUBLETerminalRuleCall_6_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getLakeAccess().getCkDOUBLETerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeaAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSeaAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__AreaAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeaAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getSeaAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sea__CkAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeaAccess().getCkDOUBLETerminalRuleCall_6_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getSeaAccess().getCkDOUBLETerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContinentAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getContinentAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__AreaAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContinentAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getContinentAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continent__CountriesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContinentAccess().getCountriesCountryParserRuleCall_5_0()); }
		ruleCountry
		{ after(grammarAccess.getContinentAccess().getCountriesCountryParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountryAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCountryAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__AreaAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountryAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getCountryAccess().getAreaDOUBLETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__PeacefulAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountryAccess().getPeacefulPeacefulKeyword_5_0()); }
		(
			{ before(grammarAccess.getCountryAccess().getPeacefulPeacefulKeyword_5_0()); }
			'peaceful'
			{ after(grammarAccess.getCountryAccess().getPeacefulPeacefulKeyword_5_0()); }
		)
		{ after(grammarAccess.getCountryAccess().getPeacefulPeacefulKeyword_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__PopulationAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountryAccess().getPopulationDOUBLETerminalRuleCall_7_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getCountryAccess().getPopulationDOUBLETerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__BordersAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountryAccess().getBordersCountryCrossReference_8_1_0()); }
		(
			{ before(grammarAccess.getCountryAccess().getBordersCountryIDTerminalRuleCall_8_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCountryAccess().getBordersCountryIDTerminalRuleCall_8_1_0_1()); }
		)
		{ after(grammarAccess.getCountryAccess().getBordersCountryCrossReference_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Country__WashedByAssignment_9_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountryAccess().getWashedByWaterCrossReference_9_1_0()); }
		(
			{ before(grammarAccess.getCountryAccess().getWashedByWaterIDTerminalRuleCall_9_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCountryAccess().getWashedByWaterIDTerminalRuleCall_9_1_0_1()); }
		)
		{ after(grammarAccess.getCountryAccess().getWashedByWaterCrossReference_9_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : ('-' ' '*)? RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
