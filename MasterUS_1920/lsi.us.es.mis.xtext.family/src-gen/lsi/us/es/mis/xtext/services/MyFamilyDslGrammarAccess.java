/*
 * generated by Xtext 2.21.0
 */
package lsi.us.es.mis.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyFamilyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FamilyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lsi.us.es.mis.xtext.MyFamilyDsl.Family");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFamilyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSurnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSurnameSTRINGTerminalRuleCall_1_0 = (RuleCall)cSurnameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPersonsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPersonsPersonParserRuleCall_3_0 = (RuleCall)cPersonsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Family:
		//	'Family' surname=STRING
		//	'{'
		//	persons+=Person+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Family' surname=STRING '{' persons+=Person+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Family'
		public Keyword getFamilyKeyword_0() { return cFamilyKeyword_0; }
		
		//surname=STRING
		public Assignment getSurnameAssignment_1() { return cSurnameAssignment_1; }
		
		//STRING
		public RuleCall getSurnameSTRINGTerminalRuleCall_1_0() { return cSurnameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//persons+=Person+
		public Assignment getPersonsAssignment_3() { return cPersonsAssignment_3; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_3_0() { return cPersonsPersonParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lsi.us.es.mis.xtext.MyFamilyDsl.Person");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cManParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWomanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Person:
		//	Man | Woman;
		@Override public ParserRule getRule() { return rule; }
		
		//Man | Woman
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Man
		public RuleCall getManParserRuleCall_0() { return cManParserRuleCall_0; }
		
		//Woman
		public RuleCall getWomanParserRuleCall_1() { return cWomanParserRuleCall_1; }
	}
	public class ManElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lsi.us.es.mis.xtext.MyFamilyDsl.Man");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParentsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParentsPersonCrossReference_2_1_0 = (CrossReference)cParentsAssignment_2_1.eContents().get(0);
		private final RuleCall cParentsPersonIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParentsPersonCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChildrenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cChildrenPersonCrossReference_3_1_0 = (CrossReference)cChildrenAssignment_3_1.eContents().get(0);
		private final RuleCall cChildrenPersonIDTerminalRuleCall_3_1_0_1 = (RuleCall)cChildrenPersonCrossReference_3_1_0.eContents().get(1);
		
		//Man:
		//	'Man' name=STRING ('parents:' parents+=[Person]+)? ('children:' children+=[Person]+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Man' name=STRING ('parents:' parents+=[Person]+)? ('children:' children+=[Person]+)?
		public Group getGroup() { return cGroup; }
		
		//'Man'
		public Keyword getManKeyword_0() { return cManKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//('parents:' parents+=[Person]+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'parents:'
		public Keyword getParentsKeyword_2_0() { return cParentsKeyword_2_0; }
		
		//parents+=[Person]+
		public Assignment getParentsAssignment_2_1() { return cParentsAssignment_2_1; }
		
		//[Person]
		public CrossReference getParentsPersonCrossReference_2_1_0() { return cParentsPersonCrossReference_2_1_0; }
		
		//ID
		public RuleCall getParentsPersonIDTerminalRuleCall_2_1_0_1() { return cParentsPersonIDTerminalRuleCall_2_1_0_1; }
		
		//('children:' children+=[Person]+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'children:'
		public Keyword getChildrenKeyword_3_0() { return cChildrenKeyword_3_0; }
		
		//children+=[Person]+
		public Assignment getChildrenAssignment_3_1() { return cChildrenAssignment_3_1; }
		
		//[Person]
		public CrossReference getChildrenPersonCrossReference_3_1_0() { return cChildrenPersonCrossReference_3_1_0; }
		
		//ID
		public RuleCall getChildrenPersonIDTerminalRuleCall_3_1_0_1() { return cChildrenPersonIDTerminalRuleCall_3_1_0_1; }
	}
	public class WomanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lsi.us.es.mis.xtext.MyFamilyDsl.Woman");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWomanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParentsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParentsPersonCrossReference_2_1_0 = (CrossReference)cParentsAssignment_2_1.eContents().get(0);
		private final RuleCall cParentsPersonIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParentsPersonCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChildrenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cChildrenPersonCrossReference_3_1_0 = (CrossReference)cChildrenAssignment_3_1.eContents().get(0);
		private final RuleCall cChildrenPersonIDTerminalRuleCall_3_1_0_1 = (RuleCall)cChildrenPersonCrossReference_3_1_0.eContents().get(1);
		
		//Woman:
		//	'Woman' name=STRING ('parents:' parents+=[Person]+)? ('children:' children+=[Person]+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Woman' name=STRING ('parents:' parents+=[Person]+)? ('children:' children+=[Person]+)?
		public Group getGroup() { return cGroup; }
		
		//'Woman'
		public Keyword getWomanKeyword_0() { return cWomanKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//('parents:' parents+=[Person]+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'parents:'
		public Keyword getParentsKeyword_2_0() { return cParentsKeyword_2_0; }
		
		//parents+=[Person]+
		public Assignment getParentsAssignment_2_1() { return cParentsAssignment_2_1; }
		
		//[Person]
		public CrossReference getParentsPersonCrossReference_2_1_0() { return cParentsPersonCrossReference_2_1_0; }
		
		//ID
		public RuleCall getParentsPersonIDTerminalRuleCall_2_1_0_1() { return cParentsPersonIDTerminalRuleCall_2_1_0_1; }
		
		//('children:' children+=[Person]+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'children:'
		public Keyword getChildrenKeyword_3_0() { return cChildrenKeyword_3_0; }
		
		//children+=[Person]+
		public Assignment getChildrenAssignment_3_1() { return cChildrenAssignment_3_1; }
		
		//[Person]
		public CrossReference getChildrenPersonCrossReference_3_1_0() { return cChildrenPersonCrossReference_3_1_0; }
		
		//ID
		public RuleCall getChildrenPersonIDTerminalRuleCall_3_1_0_1() { return cChildrenPersonIDTerminalRuleCall_3_1_0_1; }
	}
	
	
	private final FamilyElements pFamily;
	private final PersonElements pPerson;
	private final ManElements pMan;
	private final WomanElements pWoman;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyFamilyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFamily = new FamilyElements();
		this.pPerson = new PersonElements();
		this.pMan = new ManElements();
		this.pWoman = new WomanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lsi.us.es.mis.xtext.MyFamilyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Family:
	//	'Family' surname=STRING
	//	'{'
	//	persons+=Person+
	//	'}';
	public FamilyElements getFamilyAccess() {
		return pFamily;
	}
	
	public ParserRule getFamilyRule() {
		return getFamilyAccess().getRule();
	}
	
	//Person:
	//	Man | Woman;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Man:
	//	'Man' name=STRING ('parents:' parents+=[Person]+)? ('children:' children+=[Person]+)?;
	public ManElements getManAccess() {
		return pMan;
	}
	
	public ParserRule getManRule() {
		return getManAccess().getRule();
	}
	
	//Woman:
	//	'Woman' name=STRING ('parents:' parents+=[Person]+)? ('children:' children+=[Person]+)?;
	public WomanElements getWomanAccess() {
		return pWoman;
	}
	
	public ParserRule getWomanRule() {
		return getWomanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
