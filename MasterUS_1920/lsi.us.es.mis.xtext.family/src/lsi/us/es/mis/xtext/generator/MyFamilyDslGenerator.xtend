/*
 * generated by Xtext 2.20.0
 */
package lsi.us.es.mis.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import lsi.us.es.mis.xtext.myFamilyDsl.Family

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyFamilyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		//The file we must create (functions classNAme and toCode must be implemented)
		fsa.generateFile(resource.className + ".txt", //The extension that we want to have in our generated file
			toCode(resource.contents.head as Family)
		)
	}
	
		//We define a function className that will be used to obtain the name of the file with extension 'wrld'
	def className(Resource res){
		//We don't need to specify variable types
		var name = res.URI.lastSegment //We assign the name of the ctry file
		return name.substring(0, name.indexOf('.')) //And return the part that is before the extension of the file
		//For instance, if we have sample.wlrd, then we obtain name sample.yaml
	}
	
	def toCode(Family family){
		'''
		Let me introduce you to Family «family.surname»
		«writeMother(family)»
		«writeFather(family)»
		«IF numberDaughters(family)==0»
			There are no daughters in the family 
		«ELSEIF numberDaughters(family)==1»
			There is 1 daughter in the family
		«ELSE»
			There are «numberDaughters(family)» daughters in the family
		«ENDIF»
		«IF numberSons(family)==0»
			There are no sons in the family 
		«ELSEIF numberSons(family)==1»
			There is 1 son in the family
		«ELSE»
			There are «numberSons(family)» sons in the family
		«ENDIF»
		«writeDaughters(family)»
		«writeSons(family)»
		'''
	}
	
	def writeMother(Family family){
		'''
		«FOR person : family.persons»
			«IF person.eClass.name.equals("Woman")»
				«IF person.parents.size==0»
					The mother's name is «person.name»
				«ENDIF»
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def writeFather(Family family){
		'''
		«FOR person : family.persons»
			«IF person.eClass.name.equals("Man")»
				«IF person.parents.size==0»
					The father's name is «person.name»
				«ENDIF»
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def numberDaughters(Family family){
		var result = 0
		for (person : family.persons){
			if (person.eClass.name.equals("Woman")){
				if (person.parents.size>0){
					result++
				}
			}
		}
		return result
	}
	
	def numberSons(Family family){
		var result = 0
		for (person : family.persons){
			if (person.eClass.name.equals("Man")){
				if (person.parents.size>0){
					result++
				}
			}
		}
		return result
	}
	
	def writeDaughters(Family family){
		var result = ""
		var count = 0
		for (person:family.persons){
			if (person.eClass.name.equals("Woman")){
				if (person.parents.size>0){
					if (numberDaughters(family)==1){
						result += "The daughter's name is " 
						result += person.name + "\n"					
					}else if (count==0){
						result+= "The name of one daughter is " 
						result+=person.name + "\n"
						count++
					}else{
						result += "The name of another daughter is " 
						result +=person.name + "\n"
					}
				}
			}
		}
		return result
	}
	
	def writeSons(Family family){
		var result = ""
		var count = 0
		for (person:family.persons){
			if (person.eClass.name.equals("Man")){
				if (person.parents.size>0){
					if (numberSons(family)==1){
						result += "The son's name is " 
						result += person.name + "\n"					
					}else if (count==0){
						result+= "The name of one son is " 
						result += person.name + "\n"
						count++
					}else{
						result += "The name of another son is " 
						result += person.name + "\n"
					}
				}
			}
		}
		return result
	}
}
