/**
 * generated by Xtext 2.20.0
 */
package lsi.us.es.mis.xtext.generator;

import lsi.us.es.mis.xtext.myFamilyDsl.Family;
import lsi.us.es.mis.xtext.myFamilyDsl.Person;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyFamilyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _className = this.className(resource);
    String _plus = (_className + ".txt");
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile(_plus, 
      this.toCode(((Family) _head)));
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }
  
  public CharSequence toCode(final Family family) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Let me introduce you to Family ");
    String _surname = family.getSurname();
    _builder.append(_surname);
    _builder.newLineIfNotEmpty();
    CharSequence _writeMother = this.writeMother(family);
    _builder.append(_writeMother);
    _builder.newLineIfNotEmpty();
    CharSequence _writeFather = this.writeFather(family);
    _builder.append(_writeFather);
    _builder.newLineIfNotEmpty();
    {
      int _numberDaughters = this.numberDaughters(family);
      boolean _equals = (_numberDaughters == 0);
      if (_equals) {
        _builder.append("There are no daughters in the family ");
        _builder.newLine();
      } else {
        int _numberDaughters_1 = this.numberDaughters(family);
        boolean _equals_1 = (_numberDaughters_1 == 1);
        if (_equals_1) {
          _builder.append("There is 1 daughter in the family");
          _builder.newLine();
        } else {
          _builder.append("There are ");
          int _numberDaughters_2 = this.numberDaughters(family);
          _builder.append(_numberDaughters_2);
          _builder.append(" daughters in the family");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    {
      int _numberSons = this.numberSons(family);
      boolean _equals_2 = (_numberSons == 0);
      if (_equals_2) {
        _builder.append("There are no sons in the family ");
        _builder.newLine();
      } else {
        int _numberSons_1 = this.numberSons(family);
        boolean _equals_3 = (_numberSons_1 == 1);
        if (_equals_3) {
          _builder.append("There is 1 son in the family");
          _builder.newLine();
        } else {
          _builder.append("There are ");
          int _numberSons_2 = this.numberSons(family);
          _builder.append(_numberSons_2);
          _builder.append(" sons in the family");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    String _writeDaughters = this.writeDaughters(family);
    _builder.append(_writeDaughters);
    _builder.newLineIfNotEmpty();
    String _writeSons = this.writeSons(family);
    _builder.append(_writeSons);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence writeMother(final Family family) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Person> _persons = family.getPersons();
      for(final Person person : _persons) {
        {
          boolean _equals = person.eClass().getName().equals("Woman");
          if (_equals) {
            {
              int _size = person.getParents().size();
              boolean _equals_1 = (_size == 0);
              if (_equals_1) {
                _builder.append("The mother\'s name is ");
                String _name = person.getName();
                _builder.append(_name);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence writeFather(final Family family) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Person> _persons = family.getPersons();
      for(final Person person : _persons) {
        {
          boolean _equals = person.eClass().getName().equals("Man");
          if (_equals) {
            {
              int _size = person.getParents().size();
              boolean _equals_1 = (_size == 0);
              if (_equals_1) {
                _builder.append("The father\'s name is ");
                String _name = person.getName();
                _builder.append(_name);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public int numberDaughters(final Family family) {
    int result = 0;
    EList<Person> _persons = family.getPersons();
    for (final Person person : _persons) {
      boolean _equals = person.eClass().getName().equals("Woman");
      if (_equals) {
        int _size = person.getParents().size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          result++;
        }
      }
    }
    return result;
  }
  
  public int numberSons(final Family family) {
    int result = 0;
    EList<Person> _persons = family.getPersons();
    for (final Person person : _persons) {
      boolean _equals = person.eClass().getName().equals("Man");
      if (_equals) {
        int _size = person.getParents().size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          result++;
        }
      }
    }
    return result;
  }
  
  public String writeDaughters(final Family family) {
    String result = "";
    int count = 0;
    EList<Person> _persons = family.getPersons();
    for (final Person person : _persons) {
      boolean _equals = person.eClass().getName().equals("Woman");
      if (_equals) {
        int _size = person.getParents().size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          int _numberDaughters = this.numberDaughters(family);
          boolean _equals_1 = (_numberDaughters == 1);
          if (_equals_1) {
            String _result = result;
            result = (_result + "The daughter\'s name is ");
            String _result_1 = result;
            String _name = person.getName();
            String _plus = (_name + "\n");
            result = (_result_1 + _plus);
          } else {
            if ((count == 0)) {
              String _result_2 = result;
              result = (_result_2 + "The name of one daughter is ");
              String _result_3 = result;
              String _name_1 = person.getName();
              String _plus_1 = (_name_1 + "\n");
              result = (_result_3 + _plus_1);
              count++;
            } else {
              String _result_4 = result;
              result = (_result_4 + "The name of another daughter is ");
              String _result_5 = result;
              String _name_2 = person.getName();
              String _plus_2 = (_name_2 + "\n");
              result = (_result_5 + _plus_2);
            }
          }
        }
      }
    }
    return result;
  }
  
  public String writeSons(final Family family) {
    String result = "";
    int count = 0;
    EList<Person> _persons = family.getPersons();
    for (final Person person : _persons) {
      boolean _equals = person.eClass().getName().equals("Man");
      if (_equals) {
        int _size = person.getParents().size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          int _numberSons = this.numberSons(family);
          boolean _equals_1 = (_numberSons == 1);
          if (_equals_1) {
            String _result = result;
            result = (_result + "The son\'s name is ");
            String _result_1 = result;
            String _name = person.getName();
            String _plus = (_name + "\n");
            result = (_result_1 + _plus);
          } else {
            if ((count == 0)) {
              String _result_2 = result;
              result = (_result_2 + "The name of one son is ");
              String _result_3 = result;
              String _name_1 = person.getName();
              String _plus_1 = (_name_1 + "\n");
              result = (_result_3 + _plus_1);
              count++;
            } else {
              String _result_4 = result;
              result = (_result_4 + "The name of another son is ");
              String _result_5 = result;
              String _name_2 = person.getName();
              String _plus_2 = (_name_2 + "\n");
              result = (_result_5 + _plus_2);
            }
          }
        }
      }
    }
    return result;
  }
}
