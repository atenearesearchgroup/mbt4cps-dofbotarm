/*
 * generated by Xtext 2.21.0
 */
package lsi.us.es.mis.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import lsi.us.es.mis.xtext.ide.contentassist.antlr.internal.InternalMyFamilyDslParser;
import lsi.us.es.mis.xtext.services.MyFamilyDslGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MyFamilyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyFamilyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyFamilyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPersonAccess().getAlternatives(), "rule__Person__Alternatives");
			builder.put(grammarAccess.getFamilyAccess().getGroup(), "rule__Family__Group__0");
			builder.put(grammarAccess.getManAccess().getGroup(), "rule__Man__Group__0");
			builder.put(grammarAccess.getManAccess().getGroup_2(), "rule__Man__Group_2__0");
			builder.put(grammarAccess.getManAccess().getGroup_3(), "rule__Man__Group_3__0");
			builder.put(grammarAccess.getWomanAccess().getGroup(), "rule__Woman__Group__0");
			builder.put(grammarAccess.getWomanAccess().getGroup_2(), "rule__Woman__Group_2__0");
			builder.put(grammarAccess.getWomanAccess().getGroup_3(), "rule__Woman__Group_3__0");
			builder.put(grammarAccess.getFamilyAccess().getSurnameAssignment_1(), "rule__Family__SurnameAssignment_1");
			builder.put(grammarAccess.getFamilyAccess().getPersonsAssignment_3(), "rule__Family__PersonsAssignment_3");
			builder.put(grammarAccess.getManAccess().getNameAssignment_1(), "rule__Man__NameAssignment_1");
			builder.put(grammarAccess.getManAccess().getParentsAssignment_2_1(), "rule__Man__ParentsAssignment_2_1");
			builder.put(grammarAccess.getManAccess().getChildrenAssignment_3_1(), "rule__Man__ChildrenAssignment_3_1");
			builder.put(grammarAccess.getWomanAccess().getNameAssignment_1(), "rule__Woman__NameAssignment_1");
			builder.put(grammarAccess.getWomanAccess().getParentsAssignment_2_1(), "rule__Woman__ParentsAssignment_2_1");
			builder.put(grammarAccess.getWomanAccess().getChildrenAssignment_3_1(), "rule__Woman__ChildrenAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyFamilyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyFamilyDslParser createParser() {
		InternalMyFamilyDslParser result = new InternalMyFamilyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyFamilyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyFamilyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
