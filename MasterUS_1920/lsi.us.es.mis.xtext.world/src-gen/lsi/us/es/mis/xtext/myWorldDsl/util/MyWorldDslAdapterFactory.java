/**
 * generated by Xtext 2.21.0
 */
package lsi.us.es.mis.xtext.myWorldDsl.util;

import lsi.us.es.mis.xtext.myWorldDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see lsi.us.es.mis.xtext.myWorldDsl.MyWorldDslPackage
 * @generated
 */
public class MyWorldDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyWorldDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyWorldDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyWorldDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyWorldDslSwitch<Adapter> modelSwitch =
    new MyWorldDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseWorld(World object)
      {
        return createWorldAdapter();
      }
      @Override
      public Adapter caseSpace(Space object)
      {
        return createSpaceAdapter();
      }
      @Override
      public Adapter caseWater(Water object)
      {
        return createWaterAdapter();
      }
      @Override
      public Adapter caseOcean(Ocean object)
      {
        return createOceanAdapter();
      }
      @Override
      public Adapter caseLake(Lake object)
      {
        return createLakeAdapter();
      }
      @Override
      public Adapter caseSea(Sea object)
      {
        return createSeaAdapter();
      }
      @Override
      public Adapter caseContinent(Continent object)
      {
        return createContinentAdapter();
      }
      @Override
      public Adapter caseCountry(Country object)
      {
        return createCountryAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.World <em>World</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.World
   * @generated
   */
  public Adapter createWorldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.Space <em>Space</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.Space
   * @generated
   */
  public Adapter createSpaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.Water <em>Water</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.Water
   * @generated
   */
  public Adapter createWaterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.Ocean <em>Ocean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.Ocean
   * @generated
   */
  public Adapter createOceanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.Lake <em>Lake</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.Lake
   * @generated
   */
  public Adapter createLakeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.Sea <em>Sea</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.Sea
   * @generated
   */
  public Adapter createSeaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.Continent <em>Continent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.Continent
   * @generated
   */
  public Adapter createContinentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lsi.us.es.mis.xtext.myWorldDsl.Country <em>Country</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lsi.us.es.mis.xtext.myWorldDsl.Country
   * @generated
   */
  public Adapter createCountryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyWorldDslAdapterFactory
