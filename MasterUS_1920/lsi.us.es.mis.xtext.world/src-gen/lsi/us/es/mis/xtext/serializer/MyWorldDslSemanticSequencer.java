/*
 * generated by Xtext 2.21.0
 */
package lsi.us.es.mis.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import lsi.us.es.mis.xtext.myWorldDsl.Continent;
import lsi.us.es.mis.xtext.myWorldDsl.Country;
import lsi.us.es.mis.xtext.myWorldDsl.Lake;
import lsi.us.es.mis.xtext.myWorldDsl.MyWorldDslPackage;
import lsi.us.es.mis.xtext.myWorldDsl.Ocean;
import lsi.us.es.mis.xtext.myWorldDsl.Sea;
import lsi.us.es.mis.xtext.myWorldDsl.World;
import lsi.us.es.mis.xtext.services.MyWorldDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyWorldDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyWorldDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyWorldDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyWorldDslPackage.CONTINENT:
				sequence_Continent(context, (Continent) semanticObject); 
				return; 
			case MyWorldDslPackage.COUNTRY:
				sequence_Country(context, (Country) semanticObject); 
				return; 
			case MyWorldDslPackage.LAKE:
				sequence_Lake(context, (Lake) semanticObject); 
				return; 
			case MyWorldDslPackage.OCEAN:
				sequence_Ocean(context, (Ocean) semanticObject); 
				return; 
			case MyWorldDslPackage.SEA:
				sequence_Sea(context, (Sea) semanticObject); 
				return; 
			case MyWorldDslPackage.WORLD:
				sequence_World(context, (World) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Space returns Continent
	 *     Continent returns Continent
	 *
	 * Constraint:
	 *     (name=ID area=DOUBLE countries+=Country+)
	 */
	protected void sequence_Continent(ISerializationContext context, Continent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Country returns Country
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         area=DOUBLE 
	 *         peaceful?='peaceful'? 
	 *         population=DOUBLE 
	 *         borders+=[Country|ID]* 
	 *         washedBy+=[Water|ID]*
	 *     )
	 */
	protected void sequence_Country(ISerializationContext context, Country semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Space returns Lake
	 *     Water returns Lake
	 *     Lake returns Lake
	 *
	 * Constraint:
	 *     (name=ID area=DOUBLE ck=DOUBLE)
	 */
	protected void sequence_Lake(ISerializationContext context, Lake semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.SPACE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.SPACE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.SPACE__AREA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.SPACE__AREA));
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.WATER__CK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.WATER__CK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLakeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLakeAccess().getAreaDOUBLETerminalRuleCall_4_0(), semanticObject.getArea());
		feeder.accept(grammarAccess.getLakeAccess().getCkDOUBLETerminalRuleCall_6_0(), semanticObject.getCk());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Space returns Ocean
	 *     Water returns Ocean
	 *     Ocean returns Ocean
	 *
	 * Constraint:
	 *     (name=ID area=DOUBLE ck=DOUBLE)
	 */
	protected void sequence_Ocean(ISerializationContext context, Ocean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.SPACE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.SPACE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.SPACE__AREA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.SPACE__AREA));
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.WATER__CK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.WATER__CK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOceanAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOceanAccess().getAreaDOUBLETerminalRuleCall_4_0(), semanticObject.getArea());
		feeder.accept(grammarAccess.getOceanAccess().getCkDOUBLETerminalRuleCall_6_0(), semanticObject.getCk());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Space returns Sea
	 *     Water returns Sea
	 *     Sea returns Sea
	 *
	 * Constraint:
	 *     (name=ID area=DOUBLE ck=DOUBLE)
	 */
	protected void sequence_Sea(ISerializationContext context, Sea semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.SPACE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.SPACE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.SPACE__AREA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.SPACE__AREA));
			if (transientValues.isValueTransient(semanticObject, MyWorldDslPackage.Literals.WATER__CK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyWorldDslPackage.Literals.WATER__CK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSeaAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSeaAccess().getAreaDOUBLETerminalRuleCall_4_0(), semanticObject.getArea());
		feeder.accept(grammarAccess.getSeaAccess().getCkDOUBLETerminalRuleCall_6_0(), semanticObject.getCk());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     World returns World
	 *
	 * Constraint:
	 *     spaces+=Space+
	 */
	protected void sequence_World(ISerializationContext context, World semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
