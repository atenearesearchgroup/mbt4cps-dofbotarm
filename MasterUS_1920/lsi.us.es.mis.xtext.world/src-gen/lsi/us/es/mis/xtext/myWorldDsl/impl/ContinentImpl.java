/**
 * generated by Xtext 2.21.0
 */
package lsi.us.es.mis.xtext.myWorldDsl.impl;

import java.util.Collection;

import lsi.us.es.mis.xtext.myWorldDsl.Continent;
import lsi.us.es.mis.xtext.myWorldDsl.Country;
import lsi.us.es.mis.xtext.myWorldDsl.MyWorldDslPackage;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Continent</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lsi.us.es.mis.xtext.myWorldDsl.impl.ContinentImpl#getCountries <em>Countries</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContinentImpl extends SpaceImpl implements Continent
{
  /**
   * The cached value of the '{@link #getCountries() <em>Countries</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCountries()
   * @generated
   * @ordered
   */
  protected EList<Country> countries;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContinentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyWorldDslPackage.Literals.CONTINENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Country> getCountries()
  {
    if (countries == null)
    {
      countries = new EObjectContainmentEList<Country>(Country.class, this, MyWorldDslPackage.CONTINENT__COUNTRIES);
    }
    return countries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyWorldDslPackage.CONTINENT__COUNTRIES:
        return ((InternalEList<?>)getCountries()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyWorldDslPackage.CONTINENT__COUNTRIES:
        return getCountries();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyWorldDslPackage.CONTINENT__COUNTRIES:
        getCountries().clear();
        getCountries().addAll((Collection<? extends Country>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyWorldDslPackage.CONTINENT__COUNTRIES:
        getCountries().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyWorldDslPackage.CONTINENT__COUNTRIES:
        return countries != null && !countries.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ContinentImpl
