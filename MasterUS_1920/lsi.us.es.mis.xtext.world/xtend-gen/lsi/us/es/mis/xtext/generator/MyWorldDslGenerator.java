/**
 * generated by Xtext 2.20.0
 */
package lsi.us.es.mis.xtext.generator;

import java.util.ArrayList;
import lsi.us.es.mis.xtext.myWorldDsl.Continent;
import lsi.us.es.mis.xtext.myWorldDsl.Country;
import lsi.us.es.mis.xtext.myWorldDsl.Lake;
import lsi.us.es.mis.xtext.myWorldDsl.Ocean;
import lsi.us.es.mis.xtext.myWorldDsl.Sea;
import lsi.us.es.mis.xtext.myWorldDsl.Space;
import lsi.us.es.mis.xtext.myWorldDsl.Water;
import lsi.us.es.mis.xtext.myWorldDsl.World;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * CODE TO GENERATE THE TEXTUAL DESCRIPTION FILE
 */
@SuppressWarnings("all")
public class MyWorldDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _className = this.className(resource);
    String _plus = (_className + ".txt");
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile(_plus, 
      this.toCode(((World) _head)));
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }
  
  public CharSequence toCode(final World world) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("This file has been created automatically");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Our world is composed of:");
    _builder.newLine();
    _builder.append("\t");
    Integer _get = this.getNumberSpaces(world).get(0);
    _builder.append(_get, "\t");
    _builder.append(" continent");
    {
      Integer _get_1 = this.getNumberSpaces(world).get(0);
      boolean _notEquals = ((_get_1).intValue() != 1);
      if (_notEquals) {
        _builder.append("s");
      }
    }
    _builder.append(", ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Integer _get_2 = this.getNumberSpaces(world).get(1);
    _builder.append(_get_2, "\t");
    _builder.append(" countrie");
    {
      Integer _get_3 = this.getNumberSpaces(world).get(1);
      boolean _notEquals_1 = ((_get_3).intValue() != 1);
      if (_notEquals_1) {
        _builder.append("s");
      }
    }
    _builder.append(", ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Integer _get_4 = this.getNumberSpaces(world).get(2);
    _builder.append(_get_4, "\t");
    _builder.append(" ocean");
    {
      Integer _get_5 = this.getNumberSpaces(world).get(2);
      boolean _notEquals_2 = ((_get_5).intValue() != 1);
      if (_notEquals_2) {
        _builder.append("s");
      }
    }
    _builder.append(", ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Integer _get_6 = this.getNumberSpaces(world).get(3);
    _builder.append(_get_6, "\t");
    _builder.append(" sea");
    {
      Integer _get_7 = this.getNumberSpaces(world).get(3);
      boolean _notEquals_3 = ((_get_7).intValue() != 1);
      if (_notEquals_3) {
        _builder.append("s");
      }
    }
    _builder.append(" and ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Integer _get_8 = this.getNumberSpaces(world).get(4);
    _builder.append(_get_8, "\t");
    _builder.append(" lake");
    {
      Integer _get_9 = this.getNumberSpaces(world).get(4);
      boolean _notEquals_4 = ((_get_9).intValue() != 1);
      if (_notEquals_4) {
        _builder.append("s");
      }
    }
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("A more detailed analysis reveals the following.");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("Places with water:");
    _builder.newLine();
    {
      EList<Space> _spaces = world.getSpaces();
      for(final Space space : _spaces) {
        {
          boolean _equals = space.eClass().getName().equals("Ocean");
          if (_equals) {
            Ocean ocean = ((Ocean) space);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name = ocean.getName();
            _builder.append(_name, "\t");
            _builder.append(" Ocean has an area of ");
            String _area = ocean.getArea();
            _builder.append(_area, "\t");
            _builder.append(" square kilometers and a volume of ");
            String _ck = ocean.getCk();
            _builder.append(_ck, "\t");
            _builder.append(" cubic kilometers");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_1 = space.eClass().getName().equals("Sea");
            if (_equals_1) {
              Sea sea = ((Sea) space);
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              String _name_1 = sea.getName();
              _builder.append(_name_1, "\t");
              _builder.append(" Sea has an area of ");
              String _area_1 = sea.getArea();
              _builder.append(_area_1, "\t");
              _builder.append(" square kilometers and a volume of ");
              String _ck_1 = sea.getCk();
              _builder.append(_ck_1, "\t");
              _builder.append(" cubic kilometers");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equals_2 = space.eClass().getName().equals("Lake");
              if (_equals_2) {
                Lake lake = ((Lake) space);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("Lake ");
                String _name_2 = lake.getName();
                _builder.append(_name_2, "\t");
                _builder.append(" has an area of ");
                String _area_2 = lake.getArea();
                _builder.append(_area_2, "\t");
                _builder.append(" square kilometers and a volume of ");
                String _ck_2 = lake.getCk();
                _builder.append(_ck_2, "\t");
                _builder.append(" cubic kilometers");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("Regarding inland places:");
    _builder.newLine();
    {
      EList<Space> _spaces_1 = world.getSpaces();
      for(final Space space_1 : _spaces_1) {
        {
          boolean _equals_3 = space_1.eClass().getName().equals("Continent");
          if (_equals_3) {
            Continent continent = ((Continent) space_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name_3 = continent.getName();
            _builder.append(_name_3, "\t");
            _builder.append(" is a continent with an area of ");
            String _area_3 = continent.getArea();
            _builder.append(_area_3, "\t");
            _builder.append(" square kilometers. It contains the following countries:");
            _builder.newLineIfNotEmpty();
            {
              EList<Country> _countries = continent.getCountries();
              for(final Country country : _countries) {
                String _name_4 = country.getName();
                _builder.append(_name_4);
                _builder.append(". ");
                {
                  boolean _isPeaceful = country.isPeaceful();
                  if (_isPeaceful) {
                    _builder.append("This peaceful country");
                  } else {
                    _builder.append("It");
                  }
                }
                _builder.append(" has an area of ");
                String _area_4 = country.getArea();
                _builder.append(_area_4);
                _builder.append(" square kilometers and a population of ");
                String _population = country.getPopulation();
                _builder.append(_population);
                _builder.append(" inhabitants, what means a density of ");
                double _parseDouble = Double.parseDouble(country.getPopulation());
                double _parseDouble_1 = Double.parseDouble(country.getArea());
                double _divide = (_parseDouble / _parseDouble_1);
                _builder.append(_divide);
                _builder.append(".");
                _builder.newLineIfNotEmpty();
                {
                  int _size = country.getWashedBy().size();
                  boolean _greaterThan = (_size > 0);
                  if (_greaterThan) {
                    String _writeWashedByWaters = this.writeWashedByWaters(country);
                    _builder.append(_writeWashedByWaters);
                    _builder.append(" ");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("This means that the population of ");
            String _name_5 = continent.getName();
            _builder.append(_name_5, "\t");
            _builder.append(" is ");
            int _continentPopulation = this.getContinentPopulation(continent);
            _builder.append(_continentPopulation, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public ArrayList<Integer> getNumberSpaces(final World world) {
    final ArrayList<Integer> result = CollectionLiterals.<Integer>newArrayList();
    int continents = 0;
    int countries = 0;
    int oceans = 0;
    int lakes = 0;
    int seas = 0;
    EList<Space> _spaces = world.getSpaces();
    for (final Space space : _spaces) {
      {
        boolean _equals = space.eClass().getName().equals("Continent");
        if (_equals) {
          continents++;
          Continent continent = ((Continent) space);
          EList<Country> ctries = continent.getCountries();
          int _countries = countries;
          int _size = ctries.size();
          countries = (_countries + _size);
        }
        boolean _equals_1 = space.eClass().getName().equals("Ocean");
        if (_equals_1) {
          oceans++;
        }
        boolean _equals_2 = space.eClass().getName().equals("Sea");
        if (_equals_2) {
          seas++;
        }
        boolean _equals_3 = space.eClass().getName().equals("Lake");
        if (_equals_3) {
          lakes++;
        }
      }
    }
    result.add(Integer.valueOf(continents));
    result.add(Integer.valueOf(countries));
    result.add(Integer.valueOf(oceans));
    result.add(Integer.valueOf(seas));
    result.add(Integer.valueOf(lakes));
    return result;
  }
  
  public int getContinentPopulation(final Continent continent) {
    int result = 0;
    EList<Country> _countries = continent.getCountries();
    for (final Country country : _countries) {
      int _result = result;
      int _parseInt = Integer.parseInt(country.getPopulation());
      result = (_result + _parseInt);
    }
    return result;
  }
  
  /**
   * This methods prints the waters that wash a country, all in one line separated by commas,
   * and it returns such String
   */
  public String writeWashedByWaters(final Country country) {
    String result = "";
    String _result = result;
    String _name = country.getName();
    String _plus = (_name + " is washed by ");
    String _name_1 = country.getWashedBy().get(0).getName();
    String _plus_1 = (_plus + _name_1);
    result = (_result + _plus_1);
    boolean _equals = country.getWashedBy().get(0).eClass().getName().equals("Ocean");
    if (_equals) {
      String _result_1 = result;
      result = (_result_1 + " Ocean");
    } else {
      boolean _equals_1 = country.getWashedBy().get(0).eClass().getName().equals("Sea");
      if (_equals_1) {
        String _result_2 = result;
        result = (_result_2 + " Sea");
      } else {
        String _result_3 = result;
        result = (_result_3 + " Lake");
      }
    }
    EList<Water> _washedBy = country.getWashedBy();
    for (final Water water : _washedBy) {
      int _indexOf = country.getWashedBy().indexOf(water);
      boolean _notEquals = (_indexOf != 0);
      if (_notEquals) {
        String _result_4 = result;
        String _name_2 = water.getName();
        String _plus_2 = (", " + _name_2);
        result = (_result_4 + _plus_2);
        boolean _equals_2 = water.eClass().getName().equals("Ocean");
        if (_equals_2) {
          String _result_5 = result;
          result = (_result_5 + " Ocean");
        } else {
          boolean _equals_3 = water.eClass().getName().equals("Sea");
          if (_equals_3) {
            String _result_6 = result;
            result = (_result_6 + " Sea");
          } else {
            String _result_7 = result;
            result = (_result_7 + " Lake");
          }
        }
      }
    }
    return result;
  }
}
