/*
 * generated by Xtext 2.20.0
 */
package lsi.us.es.mis.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyFamilyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		//The file we must create (functions classNAme and toCode must be implemented)
		fsa.generateFile(resource.className + ".yaml", //The extension that we want to have in our generated file
			toCode(resource.contents.head as World)
		)
	}
	
		//We define a function className that will be used to obtain the name of the file with extension 'wrld'
	def className(Resource res){
		//We don't need to specify variable types
		var name = res.URI.lastSegment //We assign the name of the ctry file
		return name.substring(0, name.indexOf('.')) //And return the part that is before the extension of the file
		//For instance, if we have sample.wlrd, then we obtain name sample.yaml
	}
	
	def toCode(World world){
		'''
		'''
	}
}
