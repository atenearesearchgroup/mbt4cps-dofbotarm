/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myContryDsl.DSL

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyContryDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		//El archivo que debemos crear (las funciones className y toJavaCode habrá que definirlas):
		fsa.generateFile(resource.className + ".java",
			toJavaCode(resource.contents.head as DSL)
		)
	}
	
	//Vamos a definir la función className(), que se utilizará para obtener el nombre del archivo de country:
	def className(Resource res){
		//No necesitamos especificar el tipo de la variable name
		var name = res.URI.lastSegment //Le asignamos el nombre del archivo que contiene nuestra definición de countries
		return name.substring(0, name.indexOf('.')) //Devolvemos la parte que está antes del punto de la extensión
		//Por ejemplo, si tenemos un archivo Ejemplo.coun, obtendremos el nombre Ejemplo.java
	}
	
	def toJavaCode(DSL dsl){
		'''Este es el fichero creado automáticamente
		
		«FOR countries : dsl.country»
			El país llamado «countries.name» tiene las siguientes características:
				La moneda que usa es «countries.currency.get(0)»


		«ENDFOR»
		
		
		'''
	}
	
}
