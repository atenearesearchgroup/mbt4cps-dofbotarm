/**
 * generated by Xtext 2.20.0
 */
package lsi.us.es.mis.xtext.exercise.myDomainModel.impl;

import lsi.us.es.mis.xtext.exercise.myDomainModel.DataType;
import lsi.us.es.mis.xtext.exercise.myDomainModel.Feature;
import lsi.us.es.mis.xtext.exercise.myDomainModel.Model;
import lsi.us.es.mis.xtext.exercise.myDomainModel.MyDomainModelFactory;
import lsi.us.es.mis.xtext.exercise.myDomainModel.MyDomainModelPackage;
import lsi.us.es.mis.xtext.exercise.myDomainModel.Type;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDomainModelFactoryImpl extends EFactoryImpl implements MyDomainModelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDomainModelFactory init()
  {
    try
    {
      MyDomainModelFactory theMyDomainModelFactory = (MyDomainModelFactory)EPackage.Registry.INSTANCE.getEFactory(MyDomainModelPackage.eNS_URI);
      if (theMyDomainModelFactory != null)
      {
        return theMyDomainModelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDomainModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDomainModelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDomainModelPackage.MODEL: return createModel();
      case MyDomainModelPackage.TYPE: return createType();
      case MyDomainModelPackage.DATA_TYPE: return createDataType();
      case MyDomainModelPackage.CLASS: return createClass();
      case MyDomainModelPackage.FEATURE: return createFeature();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public lsi.us.es.mis.xtext.exercise.myDomainModel.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDomainModelPackage getMyDomainModelPackage()
  {
    return (MyDomainModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDomainModelPackage getPackage()
  {
    return MyDomainModelPackage.eINSTANCE;
  }

} //MyDomainModelFactoryImpl
