/**
 * generated by Xtext 2.26.0
 */
package org.xtext.pruebaOperation.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.pruebaOperation.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PruebaOperationFactoryImpl extends EFactoryImpl implements PruebaOperationFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PruebaOperationFactory init()
  {
    try
    {
      PruebaOperationFactory thePruebaOperationFactory = (PruebaOperationFactory)EPackage.Registry.INSTANCE.getEFactory(PruebaOperationPackage.eNS_URI);
      if (thePruebaOperationFactory != null)
      {
        return thePruebaOperationFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PruebaOperationFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PruebaOperationFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PruebaOperationPackage.INITIAL: return createInitial();
      case PruebaOperationPackage.COMMAND: return createCommand();
      case PruebaOperationPackage.ROTATE_SERVO: return createrotateServo();
      case PruebaOperationPackage.ROTATE_ALL_SERVOS: return createrotateAllServos();
      case PruebaOperationPackage.RESULT: return createResult();
      case PruebaOperationPackage.CONDITIONS: return createConditions();
      case PruebaOperationPackage.SOLUTION: return createSolution();
      case PruebaOperationPackage.IS_AT_SINGLE: return createisAtSingle();
      case PruebaOperationPackage.IS_AT: return createisAt();
      case PruebaOperationPackage.ANGLE_RES: return createAngle_res();
      case PruebaOperationPackage.ANGLE: return createAngle();
      case PruebaOperationPackage.TIME: return createTime();
      case PruebaOperationPackage.SERVO: return createServo();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PruebaOperationPackage.STATE:
        return createStateFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PruebaOperationPackage.STATE:
        return convertStateToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initial createInitial()
  {
    InitialImpl initial = new InitialImpl();
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public rotateServo createrotateServo()
  {
    rotateServoImpl rotateServo = new rotateServoImpl();
    return rotateServo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public rotateAllServos createrotateAllServos()
  {
    rotateAllServosImpl rotateAllServos = new rotateAllServosImpl();
    return rotateAllServos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Result createResult()
  {
    ResultImpl result = new ResultImpl();
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditions createConditions()
  {
    ConditionsImpl conditions = new ConditionsImpl();
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Solution createSolution()
  {
    SolutionImpl solution = new SolutionImpl();
    return solution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public isAtSingle createisAtSingle()
  {
    isAtSingleImpl isAtSingle = new isAtSingleImpl();
    return isAtSingle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public isAt createisAt()
  {
    isAtImpl isAt = new isAtImpl();
    return isAt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Angle_res createAngle_res()
  {
    Angle_resImpl angle_res = new Angle_resImpl();
    return angle_res;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Angle createAngle()
  {
    AngleImpl angle = new AngleImpl();
    return angle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Servo createServo()
  {
    ServoImpl servo = new ServoImpl();
    return servo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State createStateFromString(EDataType eDataType, String initialValue)
  {
    State result = State.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStateToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PruebaOperationPackage getPruebaOperationPackage()
  {
    return (PruebaOperationPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PruebaOperationPackage getPackage()
  {
    return PruebaOperationPackage.eINSTANCE;
  }

} //PruebaOperationFactoryImpl
