/**
 * generated by Xtext 2.26.0
 */
package org.xtext.operations.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.operations.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OperationsFactoryImpl extends EFactoryImpl implements OperationsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OperationsFactory init()
  {
    try
    {
      OperationsFactory theOperationsFactory = (OperationsFactory)EPackage.Registry.INSTANCE.getEFactory(OperationsPackage.eNS_URI);
      if (theOperationsFactory != null)
      {
        return theOperationsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OperationsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OperationsPackage.INITIAL: return createInitial();
      case OperationsPackage.COMMAND: return createCommand();
      case OperationsPackage.LIGHT_RGB_OPERATION: return createlightRGBOperation();
      case OperationsPackage.BUZZER_OFF_OPERATION: return createbuzzerOffOperation();
      case OperationsPackage.BUZZER_ON_OPERATION: return createbuzzerOnOperation();
      case OperationsPackage.CALIBRATION_OPERATION: return createcalibrationOperation();
      case OperationsPackage.CAMERA_COLOR_OPERATION: return createcameraColorOperation();
      case OperationsPackage.READ_ALL_SERVOS_OPERATION: return createreadAllServosOperation();
      case OperationsPackage.READ_SERVO_OPERATION: return createreadServoOperation();
      case OperationsPackage.ROTATE_SERVO_OPERATION: return createrotateServoOperation();
      case OperationsPackage.ROTATE_ALL_SERVOS_OPERATION: return createrotateAllServosOperation();
      case OperationsPackage.RESULT: return createResult();
      case OperationsPackage.CONDITIONS: return createConditions();
      case OperationsPackage.SOLUTION: return createSolution();
      case OperationsPackage.IS_AT_SINGLE_OPERATION: return createisAtSingleOperation();
      case OperationsPackage.IS_AT_OPERATION: return createisAtOperation();
      case OperationsPackage.ANGLE_RES: return createAngle_res();
      case OperationsPackage.ANGLE: return createAngle();
      case OperationsPackage.TIME: return createTime();
      case OperationsPackage.SERVO: return createServo();
      case OperationsPackage.VMAX: return createV_max();
      case OperationsPackage.SMAX: return createS_max();
      case OperationsPackage.HMAX: return createH_max();
      case OperationsPackage.VMIN: return createV_min();
      case OperationsPackage.SMIN: return createS_min();
      case OperationsPackage.HMIN: return createH_min();
      case OperationsPackage.COLOR: return createColor();
      case OperationsPackage.B: return createB();
      case OperationsPackage.G: return createG();
      case OperationsPackage.R: return createR();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initial createInitial()
  {
    InitialImpl initial = new InitialImpl();
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public lightRGBOperation createlightRGBOperation()
  {
    lightRGBOperationImpl lightRGBOperation = new lightRGBOperationImpl();
    return lightRGBOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public buzzerOffOperation createbuzzerOffOperation()
  {
    buzzerOffOperationImpl buzzerOffOperation = new buzzerOffOperationImpl();
    return buzzerOffOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public buzzerOnOperation createbuzzerOnOperation()
  {
    buzzerOnOperationImpl buzzerOnOperation = new buzzerOnOperationImpl();
    return buzzerOnOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public calibrationOperation createcalibrationOperation()
  {
    calibrationOperationImpl calibrationOperation = new calibrationOperationImpl();
    return calibrationOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public cameraColorOperation createcameraColorOperation()
  {
    cameraColorOperationImpl cameraColorOperation = new cameraColorOperationImpl();
    return cameraColorOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public readAllServosOperation createreadAllServosOperation()
  {
    readAllServosOperationImpl readAllServosOperation = new readAllServosOperationImpl();
    return readAllServosOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public readServoOperation createreadServoOperation()
  {
    readServoOperationImpl readServoOperation = new readServoOperationImpl();
    return readServoOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public rotateServoOperation createrotateServoOperation()
  {
    rotateServoOperationImpl rotateServoOperation = new rotateServoOperationImpl();
    return rotateServoOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public rotateAllServosOperation createrotateAllServosOperation()
  {
    rotateAllServosOperationImpl rotateAllServosOperation = new rotateAllServosOperationImpl();
    return rotateAllServosOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Result createResult()
  {
    ResultImpl result = new ResultImpl();
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditions createConditions()
  {
    ConditionsImpl conditions = new ConditionsImpl();
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Solution createSolution()
  {
    SolutionImpl solution = new SolutionImpl();
    return solution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public isAtSingleOperation createisAtSingleOperation()
  {
    isAtSingleOperationImpl isAtSingleOperation = new isAtSingleOperationImpl();
    return isAtSingleOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public isAtOperation createisAtOperation()
  {
    isAtOperationImpl isAtOperation = new isAtOperationImpl();
    return isAtOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Angle_res createAngle_res()
  {
    Angle_resImpl angle_res = new Angle_resImpl();
    return angle_res;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Angle createAngle()
  {
    AngleImpl angle = new AngleImpl();
    return angle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Servo createServo()
  {
    ServoImpl servo = new ServoImpl();
    return servo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public V_max createV_max()
  {
    V_maxImpl v_max = new V_maxImpl();
    return v_max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public S_max createS_max()
  {
    S_maxImpl s_max = new S_maxImpl();
    return s_max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public H_max createH_max()
  {
    H_maxImpl h_max = new H_maxImpl();
    return h_max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public V_min createV_min()
  {
    V_minImpl v_min = new V_minImpl();
    return v_min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public S_min createS_min()
  {
    S_minImpl s_min = new S_minImpl();
    return s_min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public H_min createH_min()
  {
    H_minImpl h_min = new H_minImpl();
    return h_min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Color createColor()
  {
    ColorImpl color = new ColorImpl();
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public B createB()
  {
    BImpl b = new BImpl();
    return b;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public G createG()
  {
    GImpl g = new GImpl();
    return g;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public R createR()
  {
    RImpl r = new RImpl();
    return r;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationsPackage getOperationsPackage()
  {
    return (OperationsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OperationsPackage getPackage()
  {
    return OperationsPackage.eINSTANCE;
  }

} //OperationsFactoryImpl
