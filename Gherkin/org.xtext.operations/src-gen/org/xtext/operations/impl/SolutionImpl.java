/**
 * generated by Xtext 2.26.0
 */
package org.xtext.operations.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.operations.Angle;
import org.xtext.operations.Angle_res;
import org.xtext.operations.OperationsPackage;
import org.xtext.operations.Solution;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Solution</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.operations.impl.SolutionImpl#getAngle <em>Angle</em>}</li>
 *   <li>{@link org.xtext.operations.impl.SolutionImpl#getAngle_res <em>Angle res</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SolutionImpl extends OperacionesImpl implements Solution
{
  /**
   * The cached value of the '{@link #getAngle() <em>Angle</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAngle()
   * @generated
   * @ordered
   */
  protected EList<Angle> angle;

  /**
   * The cached value of the '{@link #getAngle_res() <em>Angle res</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAngle_res()
   * @generated
   * @ordered
   */
  protected EList<Angle_res> angle_res;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SolutionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OperationsPackage.Literals.SOLUTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Angle> getAngle()
  {
    if (angle == null)
    {
      angle = new EObjectContainmentEList<Angle>(Angle.class, this, OperationsPackage.SOLUTION__ANGLE);
    }
    return angle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Angle_res> getAngle_res()
  {
    if (angle_res == null)
    {
      angle_res = new EObjectContainmentEList<Angle_res>(Angle_res.class, this, OperationsPackage.SOLUTION__ANGLE_RES);
    }
    return angle_res;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OperationsPackage.SOLUTION__ANGLE:
        return ((InternalEList<?>)getAngle()).basicRemove(otherEnd, msgs);
      case OperationsPackage.SOLUTION__ANGLE_RES:
        return ((InternalEList<?>)getAngle_res()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OperationsPackage.SOLUTION__ANGLE:
        return getAngle();
      case OperationsPackage.SOLUTION__ANGLE_RES:
        return getAngle_res();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OperationsPackage.SOLUTION__ANGLE:
        getAngle().clear();
        getAngle().addAll((Collection<? extends Angle>)newValue);
        return;
      case OperationsPackage.SOLUTION__ANGLE_RES:
        getAngle_res().clear();
        getAngle_res().addAll((Collection<? extends Angle_res>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OperationsPackage.SOLUTION__ANGLE:
        getAngle().clear();
        return;
      case OperationsPackage.SOLUTION__ANGLE_RES:
        getAngle_res().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OperationsPackage.SOLUTION__ANGLE:
        return angle != null && !angle.isEmpty();
      case OperationsPackage.SOLUTION__ANGLE_RES:
        return angle_res != null && !angle_res.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SolutionImpl
