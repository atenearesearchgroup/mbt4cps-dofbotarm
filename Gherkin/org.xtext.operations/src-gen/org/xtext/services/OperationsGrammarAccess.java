/*
 * generated by Xtext 2.26.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OperationsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Operations.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRotateServoOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationalArmParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNotLaterThanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Operation:
		//  rotateServoOperation | OperationalArm | NotLaterThan
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//rotateServoOperation | OperationalArm | NotLaterThan
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rotateServoOperation
		public RuleCall getRotateServoOperationParserRuleCall_0() { return cRotateServoOperationParserRuleCall_0; }
		
		//OperationalArm
		public RuleCall getOperationalArmParserRuleCall_1() { return cOperationalArmParserRuleCall_1; }
		
		//NotLaterThan
		public RuleCall getNotLaterThanParserRuleCall_2() { return cNotLaterThanParserRuleCall_2; }
	}
	public class RotateServoOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Operations.rotateServoOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRotateServoOperationKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//rotateServoOperation:
		//    name = 'rotateServoOperation(' + INT + ',' + INT + ',' + INT + ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = 'rotateServoOperation(' + INT + ',' + INT + ',' + INT + ')'
		public Group getGroup() { return cGroup; }
		
		//name = 'rotateServoOperation(' +
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'rotateServoOperation('
		public Keyword getNameRotateServoOperationKeyword_0_0() { return cNameRotateServoOperationKeyword_0_0; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//',' +
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//',' +
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class OperationalArmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Operations.OperationalArm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOperationalArmKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OperationalArm:
		//    name = 'OperationalArm(' + INT + ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = 'OperationalArm(' + INT + ')'
		public Group getGroup() { return cGroup; }
		
		//name = 'OperationalArm(' +
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'OperationalArm('
		public Keyword getNameOperationalArmKeyword_0_0() { return cNameOperationalArmKeyword_0_0; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class NotLaterThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Operations.NotLaterThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameNotLaterThanKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQueryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIsAtSingleOperationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cINTTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cTrueKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//NotLaterThan:
		//    name = 'NotLaterThan(' + INT + ')' + ' Query ' + 'isAtSingleOperation(' + INT + ',' + INT + ',' + INT + ')=' + 'True'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = 'NotLaterThan(' + INT + ')' + ' Query ' + 'isAtSingleOperation(' + INT + ',' + INT + ',' + INT + ')=' + 'True'
		public Group getGroup() { return cGroup; }
		
		//name = 'NotLaterThan(' +
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'NotLaterThan('
		public Keyword getNameNotLaterThanKeyword_0_0() { return cNameNotLaterThanKeyword_0_0; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//')' +
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//' Query ' +
		public Keyword getQueryKeyword_3() { return cQueryKeyword_3; }
		
		//'isAtSingleOperation(' +
		public Keyword getIsAtSingleOperationKeyword_4() { return cIsAtSingleOperationKeyword_4; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
		
		//',' +
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_7() { return cINTTerminalRuleCall_7; }
		
		//',' +
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//INT +
		public RuleCall getINTTerminalRuleCall_9() { return cINTTerminalRuleCall_9; }
		
		//')=' +
		public Keyword getRightParenthesisEqualsSignKeyword_10() { return cRightParenthesisEqualsSignKeyword_10; }
		
		//'True'
		public Keyword getTrueKeyword_11() { return cTrueKeyword_11; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Operations.Result");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameResultKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Result:
		//    name= 'result=' + INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name= 'result=' + INT
		public Group getGroup() { return cGroup; }
		
		//name= 'result=' +
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'result='
		public Keyword getNameResultKeyword_0_0() { return cNameResultKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final OperationElements pOperation;
	private final RotateServoOperationElements pRotateServoOperation;
	private final OperationalArmElements pOperationalArm;
	private final NotLaterThanElements pNotLaterThan;
	private final ResultElements pResult;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OperationsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOperation = new OperationElements();
		this.pRotateServoOperation = new RotateServoOperationElements();
		this.pOperationalArm = new OperationalArmElements();
		this.pNotLaterThan = new NotLaterThanElements();
		this.pResult = new ResultElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Operations".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Operation:
	//  rotateServoOperation | OperationalArm | NotLaterThan
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//rotateServoOperation:
	//    name = 'rotateServoOperation(' + INT + ',' + INT + ',' + INT + ')'
	//;
	public RotateServoOperationElements getRotateServoOperationAccess() {
		return pRotateServoOperation;
	}
	
	public ParserRule getRotateServoOperationRule() {
		return getRotateServoOperationAccess().getRule();
	}
	
	//OperationalArm:
	//    name = 'OperationalArm(' + INT + ')'
	//;
	public OperationalArmElements getOperationalArmAccess() {
		return pOperationalArm;
	}
	
	public ParserRule getOperationalArmRule() {
		return getOperationalArmAccess().getRule();
	}
	
	//NotLaterThan:
	//    name = 'NotLaterThan(' + INT + ')' + ' Query ' + 'isAtSingleOperation(' + INT + ',' + INT + ',' + INT + ')=' + 'True'
	//;
	public NotLaterThanElements getNotLaterThanAccess() {
		return pNotLaterThan;
	}
	
	public ParserRule getNotLaterThanRule() {
		return getNotLaterThanAccess().getRule();
	}
	
	//Result:
	//    name= 'result=' + INT
	//;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
