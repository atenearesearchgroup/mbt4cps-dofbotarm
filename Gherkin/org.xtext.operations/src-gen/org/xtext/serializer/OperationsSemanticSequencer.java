/*
 * generated by Xtext 2.26.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.operations.NotLaterThan;
import org.xtext.operations.OperationalArm;
import org.xtext.operations.OperationsPackage;
import org.xtext.operations.Result;
import org.xtext.operations.rotateServoOperation;
import org.xtext.services.OperationsGrammarAccess;

@SuppressWarnings("all")
public class OperationsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OperationsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OperationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OperationsPackage.NOT_LATER_THAN:
				sequence_NotLaterThan(context, (NotLaterThan) semanticObject); 
				return; 
			case OperationsPackage.OPERATIONAL_ARM:
				sequence_OperationalArm(context, (OperationalArm) semanticObject); 
				return; 
			case OperationsPackage.RESULT:
				sequence_Result(context, (Result) semanticObject); 
				return; 
			case OperationsPackage.ROTATE_SERVO_OPERATION:
				sequence_rotateServoOperation(context, (rotateServoOperation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns NotLaterThan
	 *     NotLaterThan returns NotLaterThan
	 *
	 * Constraint:
	 *     name='NotLaterThan('+
	 * </pre>
	 */
	protected void sequence_NotLaterThan(ISerializationContext context, NotLaterThan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns OperationalArm
	 *     OperationalArm returns OperationalArm
	 *
	 * Constraint:
	 *     name='OperationalArm('+
	 * </pre>
	 */
	protected void sequence_OperationalArm(ISerializationContext context, OperationalArm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Result returns Result
	 *
	 * Constraint:
	 *     name='result='+
	 * </pre>
	 */
	protected void sequence_Result(ISerializationContext context, Result semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns rotateServoOperation
	 *     rotateServoOperation returns rotateServoOperation
	 *
	 * Constraint:
	 *     name='rotateServoOperation('+
	 * </pre>
	 */
	protected void sequence_rotateServoOperation(ISerializationContext context, rotateServoOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
