/*
 * generated by Xtext 2.26.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalDofbotDSLParser;
import org.xtext.services.DofbotDSLGrammarAccess;

public class DofbotDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DofbotDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DofbotDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getArmAccess().getGroup(), "rule__Arm__Group__0");
			builder.put(grammarAccess.getArmAccess().getGroup_3(), "rule__Arm__Group_3__0");
			builder.put(grammarAccess.getArmAccess().getGroup_4(), "rule__Arm__Group_4__0");
			builder.put(grammarAccess.getRotateMultipleAccess().getGroup(), "rule__RotateMultiple__Group__0");
			builder.put(grammarAccess.getRotateSingleAccess().getGroup(), "rule__RotateSingle__Group__0");
			builder.put(grammarAccess.getServosAccess().getGroup(), "rule__Servos__Group__0");
			builder.put(grammarAccess.getAnglesAccess().getGroup(), "rule__Angles__Group__0");
			builder.put(grammarAccess.getArmAccess().getNameAssignment_1(), "rule__Arm__NameAssignment_1");
			builder.put(grammarAccess.getArmAccess().getRotateMultipleAssignment_3_1(), "rule__Arm__RotateMultipleAssignment_3_1");
			builder.put(grammarAccess.getArmAccess().getRotateSingleAssignment_4_1(), "rule__Arm__RotateSingleAssignment_4_1");
			builder.put(grammarAccess.getRotateMultipleAccess().getNameAssignment_1(), "rule__RotateMultiple__NameAssignment_1");
			builder.put(grammarAccess.getRotateMultipleAccess().getAngleAssignment_3(), "rule__RotateMultiple__AngleAssignment_3");
			builder.put(grammarAccess.getRotateMultipleAccess().getTimeAssignment_5(), "rule__RotateMultiple__TimeAssignment_5");
			builder.put(grammarAccess.getRotateSingleAccess().getNameAssignment_1(), "rule__RotateSingle__NameAssignment_1");
			builder.put(grammarAccess.getRotateSingleAccess().getServoAssignment_3(), "rule__RotateSingle__ServoAssignment_3");
			builder.put(grammarAccess.getRotateSingleAccess().getAngleAssignment_4(), "rule__RotateSingle__AngleAssignment_4");
			builder.put(grammarAccess.getRotateSingleAccess().getTimeAssignment_6(), "rule__RotateSingle__TimeAssignment_6");
			builder.put(grammarAccess.getServosAccess().getNameAssignment_1(), "rule__Servos__NameAssignment_1");
			builder.put(grammarAccess.getAnglesAccess().getNameAssignment_1(), "rule__Angles__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DofbotDSLGrammarAccess grammarAccess;

	@Override
	protected InternalDofbotDSLParser createParser() {
		InternalDofbotDSLParser result = new InternalDofbotDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DofbotDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DofbotDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
