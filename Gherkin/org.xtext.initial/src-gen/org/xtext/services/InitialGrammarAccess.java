/*
 * generated by Xtext 2.26.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class InitialGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Initial.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePosInicialKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeTimeParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Initial:
		//    name='posInicial'
		//    '('
		//    (time+=Time)
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='posInicial'
		//'('
		//(time+=Time)
		//')'
		public Group getGroup() { return cGroup; }
		
		//name='posInicial'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'posInicial'
		public Keyword getNamePosInicialKeyword_0_0() { return cNamePosInicialKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(time+=Time)
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_2_0() { return cTimeTimeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final InitialElements pInitial;
	
	private final Grammar grammar;
	
	private final CommandGrammarAccess gaCommand;
	
	private final ResultGrammarAccess gaResult;
	
	private final ConditionGrammarAccess gaCondition;
	
	private final SolutionGrammarAccess gaSolution;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public InitialGrammarAccess(GrammarProvider grammarProvider,
			CommandGrammarAccess gaCommand,
			ResultGrammarAccess gaResult,
			ConditionGrammarAccess gaCondition,
			SolutionGrammarAccess gaSolution,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommand = gaCommand;
		this.gaResult = gaResult;
		this.gaCondition = gaCondition;
		this.gaSolution = gaSolution;
		this.gaTerminals = gaTerminals;
		this.pInitial = new InitialElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Initial".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public CommandGrammarAccess getCommandGrammarAccess() {
		return gaCommand;
	}
	
	public ResultGrammarAccess getResultGrammarAccess() {
		return gaResult;
	}
	
	public ConditionGrammarAccess getConditionGrammarAccess() {
		return gaCondition;
	}
	
	public SolutionGrammarAccess getSolutionGrammarAccess() {
		return gaSolution;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Initial:
	//    name='posInicial'
	//    '('
	//    (time+=Time)
	//    ')'
	//;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Command:
	//    rotateServo | rotateAllServos
	//;
	public CommandGrammarAccess.CommandElements getCommandAccess() {
		return gaCommand.getCommandAccess();
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//rotateServo:
	//    name='rotateServo'
	//    '('
	//    (servo+=Servo)
	//    ','
	//    (angle+=Angle)
	//    ','
	//    (time+=Time)
	//    ')'
	//;
	public CommandGrammarAccess.RotateServoElements getRotateServoAccess() {
		return gaCommand.getRotateServoAccess();
	}
	
	public ParserRule getRotateServoRule() {
		return getRotateServoAccess().getRule();
	}
	
	//rotateAllServos:
	//    name='rotateAllServos'
	//    '('
	//    (angle1+=Angle)
	//    ','
	//    (angle2+=Angle)
	//    ','
	//    (angle3+=Angle)
	//    ','
	//    (angle4+=Angle)
	//    ','
	//    (angle5+=Angle)
	//    ','
	//    (angle6+=Angle)
	//    ','
	//    (time+=Time)
	//    ')'
	//;
	public CommandGrammarAccess.RotateAllServosElements getRotateAllServosAccess() {
		return gaCommand.getRotateAllServosAccess();
	}
	
	public ParserRule getRotateAllServosRule() {
		return getRotateAllServosAccess().getRule();
	}
	
	//Result:
	//    name='result'
	//    '('
	//    (time+=Time)
	//    ')'
	//;
	public ResultGrammarAccess.ResultElements getResultAccess() {
		return gaResult.getResultAccess();
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Conditions:
	//    name='NotLaterThan'
	//    '('
	//    (time+=Time)
	//    ')'
	//;
	public ConditionGrammarAccess.ConditionsElements getConditionsAccess() {
		return gaCondition.getConditionsAccess();
	}
	
	public ParserRule getConditionsRule() {
		return getConditionsAccess().getRule();
	}
	
	//Solution:
	//    isAtSingle | isAt
	//;
	public SolutionGrammarAccess.SolutionElements getSolutionAccess() {
		return gaSolution.getSolutionAccess();
	}
	
	public ParserRule getSolutionRule() {
		return getSolutionAccess().getRule();
	}
	
	//isAtSingle:
	//    name='isAtSingle'
	//    '('
	//    (servo+=Servo)
	//    ','
	//    (angle+=Angle)
	//    ','
	//    (angle_res+=Angle_res)
	//    ')'
	//;
	public SolutionGrammarAccess.IsAtSingleElements getIsAtSingleAccess() {
		return gaSolution.getIsAtSingleAccess();
	}
	
	public ParserRule getIsAtSingleRule() {
		return getIsAtSingleAccess().getRule();
	}
	
	//isAt:
	//    name='isAt'
	//    '('
	//    (angle1+=Angle)
	//    ','
	//    (angle2+=Angle)
	//    ','
	//    (angle3+=Angle)
	//    ','
	//    (angle4+=Angle)
	//    ','
	//    (angle5+=Angle)
	//    ','
	//    (angle6+=Angle)
	//    ','
	//    (angle_res+=Angle_res)
	//    ')'
	//;
	public SolutionGrammarAccess.IsAtElements getIsAtAccess() {
		return gaSolution.getIsAtAccess();
	}
	
	public ParserRule getIsAtRule() {
		return getIsAtAccess().getRule();
	}
	
	//Angle_res:
	//    angle_res=INT
	//;
	public SolutionGrammarAccess.Angle_resElements getAngle_resAccess() {
		return gaSolution.getAngle_resAccess();
	}
	
	public ParserRule getAngle_resRule() {
		return getAngle_resAccess().getRule();
	}
	
	//Angle:
	//    angle=INT
	//;
	public SolutionGrammarAccess.AngleElements getAngleAccess() {
		return gaSolution.getAngleAccess();
	}
	
	public ParserRule getAngleRule() {
		return getAngleAccess().getRule();
	}
	
	//Time:
	//    time=INT
	//;
	public SolutionGrammarAccess.TimeElements getTimeAccess() {
		return gaSolution.getTimeAccess();
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Servo:
	//    servo=INT
	//;
	public SolutionGrammarAccess.ServoElements getServoAccess() {
		return gaSolution.getServoAccess();
	}
	
	public ParserRule getServoRule() {
		return getServoAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
