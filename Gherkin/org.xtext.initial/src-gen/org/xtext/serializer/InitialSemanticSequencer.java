/*
 * generated by Xtext 2.26.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.xtext.command.CommandPackage;
import org.xtext.command.rotateAllServos;
import org.xtext.command.rotateServo;
import org.xtext.condition.ConditionPackage;
import org.xtext.condition.Conditions;
import org.xtext.initial.Initial;
import org.xtext.initial.InitialPackage;
import org.xtext.result.Result;
import org.xtext.result.ResultPackage;
import org.xtext.services.InitialGrammarAccess;
import org.xtext.solution.Angle;
import org.xtext.solution.Angle_res;
import org.xtext.solution.Servo;
import org.xtext.solution.SolutionPackage;
import org.xtext.solution.Time;
import org.xtext.solution.isAt;
import org.xtext.solution.isAtSingle;

@SuppressWarnings("all")
public class InitialSemanticSequencer extends CommandSemanticSequencer {

	@Inject
	private InitialGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CommandPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CommandPackage.ROTATE_ALL_SERVOS:
				sequence_rotateAllServos(context, (rotateAllServos) semanticObject); 
				return; 
			case CommandPackage.ROTATE_SERVO:
				sequence_rotateServo(context, (rotateServo) semanticObject); 
				return; 
			}
		else if (epackage == ConditionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ConditionPackage.CONDITIONS:
				sequence_Conditions(context, (Conditions) semanticObject); 
				return; 
			}
		else if (epackage == InitialPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case InitialPackage.INITIAL:
				sequence_Initial(context, (Initial) semanticObject); 
				return; 
			}
		else if (epackage == ResultPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ResultPackage.RESULT:
				sequence_Result(context, (Result) semanticObject); 
				return; 
			}
		else if (epackage == SolutionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SolutionPackage.ANGLE:
				sequence_Angle(context, (Angle) semanticObject); 
				return; 
			case SolutionPackage.ANGLE_RES:
				sequence_Angle_res(context, (Angle_res) semanticObject); 
				return; 
			case SolutionPackage.SERVO:
				sequence_Servo(context, (Servo) semanticObject); 
				return; 
			case SolutionPackage.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			case SolutionPackage.IS_AT:
				sequence_isAt(context, (isAt) semanticObject); 
				return; 
			case SolutionPackage.IS_AT_SINGLE:
				sequence_isAtSingle(context, (isAtSingle) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Initial returns Initial
	 *
	 * Constraint:
	 *     (name='posInicial' time+=Time)
	 * </pre>
	 */
	protected void sequence_Initial(ISerializationContext context, Initial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
