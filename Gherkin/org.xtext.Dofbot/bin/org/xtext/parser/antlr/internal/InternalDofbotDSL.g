/*
 * generated by Xtext 2.26.0
 */
grammar InternalDofbotDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.DofbotDSLGrammarAccess;

}

@parser::members {

 	private DofbotDSLGrammarAccess grammarAccess;

    public InternalDofbotDSLParser(TokenStream input, DofbotDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Arm";
   	}

   	@Override
   	protected DofbotDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleArm
entryRuleArm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArmRule()); }
	iv_ruleArm=ruleArm
	{ $current=$iv_ruleArm.current; }
	EOF;

// Rule Arm
ruleArm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Name'
		{
			newLeafNode(otherlv_0, grammarAccess.getArmAccess().getNameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getArmAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArmRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getArmAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='rotateMultiple'
			{
				newLeafNode(otherlv_3, grammarAccess.getArmAccess().getRotateMultipleKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArmAccess().getRotateMultipleRotateMultipleParserRuleCall_3_1_0());
					}
					lv_rotateMultiple_4_0=ruleRotateMultiple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArmRule());
						}
						add(
							$current,
							"rotateMultiple",
							lv_rotateMultiple_4_0,
							"org.xtext.DofbotDSL.RotateMultiple");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		(
			otherlv_5='rotateSingle'
			{
				newLeafNode(otherlv_5, grammarAccess.getArmAccess().getRotateSingleKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArmAccess().getRotateSingleRotateSingleParserRuleCall_4_1_0());
					}
					lv_rotateSingle_6_0=ruleRotateSingle
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArmRule());
						}
						add(
							$current,
							"rotateSingle",
							lv_rotateSingle_6_0,
							"org.xtext.DofbotDSL.RotateSingle");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getArmAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRotateMultiple
entryRuleRotateMultiple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateMultipleRule()); }
	iv_ruleRotateMultiple=ruleRotateMultiple
	{ $current=$iv_ruleRotateMultiple.current; }
	EOF;

// Rule RotateMultiple
ruleRotateMultiple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RotateMultiple'
		{
			newLeafNode(otherlv_0, grammarAccess.getRotateMultipleAccess().getRotateMultipleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRotateMultipleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateMultipleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRotateMultipleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateMultipleAccess().getAngleAnglesParserRuleCall_3_0());
				}
				lv_Angle_3_0=ruleAngles
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateMultipleRule());
					}
					add(
						$current,
						"Angle",
						lv_Angle_3_0,
						"org.xtext.DofbotDSL.Angles");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='Time'
		{
			newLeafNode(otherlv_4, grammarAccess.getRotateMultipleAccess().getTimeKeyword_4());
		}
		(
			(
				lv_time_5_0=RULE_INT
				{
					newLeafNode(lv_time_5_0, grammarAccess.getRotateMultipleAccess().getTimeINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateMultipleRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRotateMultipleAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleRotateSingle
entryRuleRotateSingle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateSingleRule()); }
	iv_ruleRotateSingle=ruleRotateSingle
	{ $current=$iv_ruleRotateSingle.current; }
	EOF;

// Rule RotateSingle
ruleRotateSingle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RotateSingle'
		{
			newLeafNode(otherlv_0, grammarAccess.getRotateSingleAccess().getRotateSingleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRotateSingleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateSingleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRotateSingleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateSingleAccess().getServoServosParserRuleCall_3_0());
				}
				lv_Servo_3_0=ruleServos
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateSingleRule());
					}
					set(
						$current,
						"Servo",
						lv_Servo_3_0,
						"org.xtext.DofbotDSL.Servos");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateSingleAccess().getAngleAnglesParserRuleCall_4_0());
				}
				lv_Angle_4_0=ruleAngles
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateSingleRule());
					}
					set(
						$current,
						"Angle",
						lv_Angle_4_0,
						"org.xtext.DofbotDSL.Angles");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='Time'
		{
			newLeafNode(otherlv_5, grammarAccess.getRotateSingleAccess().getTimeKeyword_5());
		}
		(
			(
				lv_time_6_0=RULE_INT
				{
					newLeafNode(lv_time_6_0, grammarAccess.getRotateSingleAccess().getTimeINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateSingleRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getRotateSingleAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleServos
entryRuleServos returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServosRule()); }
	iv_ruleServos=ruleServos
	{ $current=$iv_ruleServos.current; }
	EOF;

// Rule Servos
ruleServos returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Servo'
		{
			newLeafNode(otherlv_0, grammarAccess.getServosAccess().getServoKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_INT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getServosAccess().getNameINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServosRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleAngles
entryRuleAngles returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnglesRule()); }
	iv_ruleAngles=ruleAngles
	{ $current=$iv_ruleAngles.current; }
	EOF;

// Rule Angles
ruleAngles returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Angle'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnglesAccess().getAngleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_INT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAnglesAccess().getNameINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnglesRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
