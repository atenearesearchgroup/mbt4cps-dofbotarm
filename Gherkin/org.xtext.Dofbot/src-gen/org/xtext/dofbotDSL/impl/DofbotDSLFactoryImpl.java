/**
 * generated by Xtext 2.26.0
 */
package org.xtext.dofbotDSL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.dofbotDSL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DofbotDSLFactoryImpl extends EFactoryImpl implements DofbotDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DofbotDSLFactory init()
  {
    try
    {
      DofbotDSLFactory theDofbotDSLFactory = (DofbotDSLFactory)EPackage.Registry.INSTANCE.getEFactory(DofbotDSLPackage.eNS_URI);
      if (theDofbotDSLFactory != null)
      {
        return theDofbotDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DofbotDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DofbotDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DofbotDSLPackage.ARM: return createArm();
      case DofbotDSLPackage.ROTATE_MULTIPLE: return createRotateMultiple();
      case DofbotDSLPackage.ROTATE_SINGLE: return createRotateSingle();
      case DofbotDSLPackage.SERVOS: return createServos();
      case DofbotDSLPackage.ANGLES: return createAngles();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arm createArm()
  {
    ArmImpl arm = new ArmImpl();
    return arm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RotateMultiple createRotateMultiple()
  {
    RotateMultipleImpl rotateMultiple = new RotateMultipleImpl();
    return rotateMultiple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RotateSingle createRotateSingle()
  {
    RotateSingleImpl rotateSingle = new RotateSingleImpl();
    return rotateSingle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Servos createServos()
  {
    ServosImpl servos = new ServosImpl();
    return servos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Angles createAngles()
  {
    AnglesImpl angles = new AnglesImpl();
    return angles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DofbotDSLPackage getDofbotDSLPackage()
  {
    return (DofbotDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DofbotDSLPackage getPackage()
  {
    return DofbotDSLPackage.eINSTANCE;
  }

} //DofbotDSLFactoryImpl
