/*
 * generated by Xtext 2.26.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DofbotDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ArmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DofbotDSL.Arm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRotateMultipleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRotateMultipleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRotateMultipleRotateMultipleParserRuleCall_3_1_0 = (RuleCall)cRotateMultipleAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRotateSingleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRotateSingleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRotateSingleRotateSingleParserRuleCall_4_1_0 = (RuleCall)cRotateSingleAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Arm:
		//    'Name' name=ID
		//    '{'
		//        ('rotateMultiple' (rotateMultiple+=RotateMultiple)+)?
		//        ('rotateSingle' (rotateSingle+=RotateSingle)+)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Name' name=ID
		//'{'
		//    ('rotateMultiple' (rotateMultiple+=RotateMultiple)+)?
		//    ('rotateSingle' (rotateSingle+=RotateSingle)+)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('rotateMultiple' (rotateMultiple+=RotateMultiple)+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'rotateMultiple'
		public Keyword getRotateMultipleKeyword_3_0() { return cRotateMultipleKeyword_3_0; }
		
		//(rotateMultiple+=RotateMultiple)+
		public Assignment getRotateMultipleAssignment_3_1() { return cRotateMultipleAssignment_3_1; }
		
		//RotateMultiple
		public RuleCall getRotateMultipleRotateMultipleParserRuleCall_3_1_0() { return cRotateMultipleRotateMultipleParserRuleCall_3_1_0; }
		
		//('rotateSingle' (rotateSingle+=RotateSingle)+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'rotateSingle'
		public Keyword getRotateSingleKeyword_4_0() { return cRotateSingleKeyword_4_0; }
		
		//(rotateSingle+=RotateSingle)+
		public Assignment getRotateSingleAssignment_4_1() { return cRotateSingleAssignment_4_1; }
		
		//RotateSingle
		public RuleCall getRotateSingleRotateSingleParserRuleCall_4_1_0() { return cRotateSingleRotateSingleParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RotateMultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DofbotDSL.RotateMultiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotateMultipleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAngleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAngleAnglesParserRuleCall_3_0 = (RuleCall)cAngleAssignment_3.eContents().get(0);
		private final Keyword cTimeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeINTTerminalRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RotateMultiple:
		//    'RotateMultiple' name=ID
		//    '{'
		//        (Angle+=Angles)+
		//        'Time' time=INT
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'RotateMultiple' name=ID
		//'{'
		//    (Angle+=Angles)+
		//    'Time' time=INT
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'RotateMultiple'
		public Keyword getRotateMultipleKeyword_0() { return cRotateMultipleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(Angle+=Angles)+
		public Assignment getAngleAssignment_3() { return cAngleAssignment_3; }
		
		//Angles
		public RuleCall getAngleAnglesParserRuleCall_3_0() { return cAngleAnglesParserRuleCall_3_0; }
		
		//'Time'
		public Keyword getTimeKeyword_4() { return cTimeKeyword_4; }
		
		//time=INT
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_5_0() { return cTimeINTTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RotateSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DofbotDSL.RotateSingle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotateSingleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cServoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServoServosParserRuleCall_3_0 = (RuleCall)cServoAssignment_3.eContents().get(0);
		private final Assignment cAngleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAngleAnglesParserRuleCall_4_0 = (RuleCall)cAngleAssignment_4.eContents().get(0);
		private final Keyword cTimeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTimeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTimeINTTerminalRuleCall_6_0 = (RuleCall)cTimeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RotateSingle:
		//    'RotateSingle' name=ID
		//    '{'
		//        Servo=Servos
		//        Angle=Angles
		//        'Time' time=INT
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'RotateSingle' name=ID
		//'{'
		//    Servo=Servos
		//    Angle=Angles
		//    'Time' time=INT
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'RotateSingle'
		public Keyword getRotateSingleKeyword_0() { return cRotateSingleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//Servo=Servos
		public Assignment getServoAssignment_3() { return cServoAssignment_3; }
		
		//Servos
		public RuleCall getServoServosParserRuleCall_3_0() { return cServoServosParserRuleCall_3_0; }
		
		//Angle=Angles
		public Assignment getAngleAssignment_4() { return cAngleAssignment_4; }
		
		//Angles
		public RuleCall getAngleAnglesParserRuleCall_4_0() { return cAngleAnglesParserRuleCall_4_0; }
		
		//'Time'
		public Keyword getTimeKeyword_5() { return cTimeKeyword_5; }
		
		//time=INT
		public Assignment getTimeAssignment_6() { return cTimeAssignment_6; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_6_0() { return cTimeINTTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ServosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DofbotDSL.Servos");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Servos:
		//    'Servo' name=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Servo' name=INT
		public Group getGroup() { return cGroup; }
		
		//'Servo'
		public Keyword getServoKeyword_0() { return cServoKeyword_0; }
		
		//name=INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }
	}
	public class AnglesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DofbotDSL.Angles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAngleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Angles:
		//    'Angle' name=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Angle' name=INT
		public Group getGroup() { return cGroup; }
		
		//'Angle'
		public Keyword getAngleKeyword_0() { return cAngleKeyword_0; }
		
		//name=INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }
	}
	
	
	private final ArmElements pArm;
	private final RotateMultipleElements pRotateMultiple;
	private final RotateSingleElements pRotateSingle;
	private final ServosElements pServos;
	private final AnglesElements pAngles;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DofbotDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pArm = new ArmElements();
		this.pRotateMultiple = new RotateMultipleElements();
		this.pRotateSingle = new RotateSingleElements();
		this.pServos = new ServosElements();
		this.pAngles = new AnglesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.DofbotDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Arm:
	//    'Name' name=ID
	//    '{'
	//        ('rotateMultiple' (rotateMultiple+=RotateMultiple)+)?
	//        ('rotateSingle' (rotateSingle+=RotateSingle)+)?
	//    '}'
	//;
	public ArmElements getArmAccess() {
		return pArm;
	}
	
	public ParserRule getArmRule() {
		return getArmAccess().getRule();
	}
	
	//RotateMultiple:
	//    'RotateMultiple' name=ID
	//    '{'
	//        (Angle+=Angles)+
	//        'Time' time=INT
	//    '}'
	//;
	public RotateMultipleElements getRotateMultipleAccess() {
		return pRotateMultiple;
	}
	
	public ParserRule getRotateMultipleRule() {
		return getRotateMultipleAccess().getRule();
	}
	
	//RotateSingle:
	//    'RotateSingle' name=ID
	//    '{'
	//        Servo=Servos
	//        Angle=Angles
	//        'Time' time=INT
	//    '}'
	//;
	public RotateSingleElements getRotateSingleAccess() {
		return pRotateSingle;
	}
	
	public ParserRule getRotateSingleRule() {
		return getRotateSingleAccess().getRule();
	}
	
	//Servos:
	//    'Servo' name=INT
	//;
	public ServosElements getServosAccess() {
		return pServos;
	}
	
	public ParserRule getServosRule() {
		return getServosAccess().getRule();
	}
	
	//Angles:
	//    'Angle' name=INT
	//;
	public AnglesElements getAnglesAccess() {
		return pAngles;
	}
	
	public ParserRule getAnglesRule() {
		return getAnglesAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
