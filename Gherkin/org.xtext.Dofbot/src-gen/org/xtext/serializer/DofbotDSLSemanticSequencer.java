/*
 * generated by Xtext 2.26.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.dofbotDSL.Angles;
import org.xtext.dofbotDSL.Arm;
import org.xtext.dofbotDSL.DofbotDSLPackage;
import org.xtext.dofbotDSL.RotateMultiple;
import org.xtext.dofbotDSL.RotateSingle;
import org.xtext.dofbotDSL.Servos;
import org.xtext.services.DofbotDSLGrammarAccess;

@SuppressWarnings("all")
public class DofbotDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DofbotDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DofbotDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DofbotDSLPackage.ANGLES:
				sequence_Angles(context, (Angles) semanticObject); 
				return; 
			case DofbotDSLPackage.ARM:
				sequence_Arm(context, (Arm) semanticObject); 
				return; 
			case DofbotDSLPackage.ROTATE_MULTIPLE:
				sequence_RotateMultiple(context, (RotateMultiple) semanticObject); 
				return; 
			case DofbotDSLPackage.ROTATE_SINGLE:
				sequence_RotateSingle(context, (RotateSingle) semanticObject); 
				return; 
			case DofbotDSLPackage.SERVOS:
				sequence_Servos(context, (Servos) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Angles returns Angles
	 *
	 * Constraint:
	 *     name=INT
	 * </pre>
	 */
	protected void sequence_Angles(ISerializationContext context, Angles semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DofbotDSLPackage.Literals.ANGLES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DofbotDSLPackage.Literals.ANGLES__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnglesAccess().getNameINTTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arm returns Arm
	 *
	 * Constraint:
	 *     (name=ID rotateMultiple+=RotateMultiple* rotateSingle+=RotateSingle*)
	 * </pre>
	 */
	protected void sequence_Arm(ISerializationContext context, Arm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RotateMultiple returns RotateMultiple
	 *
	 * Constraint:
	 *     (name=ID Angle+=Angles+ time=INT)
	 * </pre>
	 */
	protected void sequence_RotateMultiple(ISerializationContext context, RotateMultiple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RotateSingle returns RotateSingle
	 *
	 * Constraint:
	 *     (name=ID Servo=Servos Angle=Angles time=INT)
	 * </pre>
	 */
	protected void sequence_RotateSingle(ISerializationContext context, RotateSingle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__NAME));
			if (transientValues.isValueTransient(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__SERVO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__SERVO));
			if (transientValues.isValueTransient(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__ANGLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__ANGLE));
			if (transientValues.isValueTransient(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DofbotDSLPackage.Literals.ROTATE_SINGLE__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotateSingleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRotateSingleAccess().getServoServosParserRuleCall_3_0(), semanticObject.getServo());
		feeder.accept(grammarAccess.getRotateSingleAccess().getAngleAnglesParserRuleCall_4_0(), semanticObject.getAngle());
		feeder.accept(grammarAccess.getRotateSingleAccess().getTimeINTTerminalRuleCall_6_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Servos returns Servos
	 *
	 * Constraint:
	 *     name=INT
	 * </pre>
	 */
	protected void sequence_Servos(ISerializationContext context, Servos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DofbotDSLPackage.Literals.SERVOS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DofbotDSLPackage.Literals.SERVOS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServosAccess().getNameINTTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
