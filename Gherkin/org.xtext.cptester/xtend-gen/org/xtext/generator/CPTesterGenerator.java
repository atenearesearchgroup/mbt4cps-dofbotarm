/**
 * generated by Xtext 2.26.0
 */
package org.xtext.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.cPTester.Scenario;
import org.xtext.operations.Angle;
import org.xtext.operations.Operaciones;
import org.xtext.operations.Servo;
import org.xtext.operations.Time;
import org.xtext.operations.rotateServo;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CPTesterGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _className = this.className(resource);
    String _plus = (_className + ".txt");
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile(_plus, 
      this.toCode(((Scenario) _head)));
  }
  
  public CharSequence toCode(final Scenario scenario) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<Operaciones> _command = scenario.getWhen().getCommand();
      for(final Operaciones cmd : _command) {
        {
          boolean _equals = cmd.eClass().getName().equals("rotateServo");
          if (_equals) {
            rotateServo rot = ((rotateServo) cmd);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Servo _get = rot.getServo().get(0);
            _builder.append(_get, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Angle _get_1 = rot.getAngle().get(0);
            _builder.append(_get_1, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Time _get_2 = rot.getTime().get(0);
            _builder.append(_get_2, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("7777");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }
}
