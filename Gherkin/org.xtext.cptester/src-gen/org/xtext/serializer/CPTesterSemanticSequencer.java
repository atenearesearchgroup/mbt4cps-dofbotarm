/*
 * generated by Xtext 2.26.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.cPTester.CPTesterPackage;
import org.xtext.cPTester.Scenario;
import org.xtext.operations.NotLaterThan;
import org.xtext.operations.OperationalArm;
import org.xtext.operations.OperationsPackage;
import org.xtext.operations.angle;
import org.xtext.operations.angle_res;
import org.xtext.operations.isAtOperation;
import org.xtext.operations.isAtSingleOperation;
import org.xtext.operations.result;
import org.xtext.operations.rotateAllServosOperation;
import org.xtext.operations.rotateServoOperation;
import org.xtext.operations.servo;
import org.xtext.operations.time;
import org.xtext.services.CPTesterGrammarAccess;

@SuppressWarnings("all")
public class CPTesterSemanticSequencer extends OperationsSemanticSequencer {

	@Inject
	private CPTesterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CPTesterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CPTesterPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			}
		else if (epackage == OperationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OperationsPackage.NOT_LATER_THAN:
				sequence_NotLaterThan(context, (NotLaterThan) semanticObject); 
				return; 
			case OperationsPackage.OPERATIONAL_ARM:
				sequence_OperationalArm(context, (OperationalArm) semanticObject); 
				return; 
			case OperationsPackage.ANGLE:
				sequence_angle(context, (angle) semanticObject); 
				return; 
			case OperationsPackage.ANGLE_RES:
				sequence_angle_res(context, (angle_res) semanticObject); 
				return; 
			case OperationsPackage.IS_AT_OPERATION:
				sequence_isAtOperation(context, (isAtOperation) semanticObject); 
				return; 
			case OperationsPackage.IS_AT_SINGLE_OPERATION:
				sequence_isAtSingleOperation(context, (isAtSingleOperation) semanticObject); 
				return; 
			case OperationsPackage.RESULT:
				sequence_result(context, (result) semanticObject); 
				return; 
			case OperationsPackage.ROTATE_ALL_SERVOS_OPERATION:
				sequence_rotateAllServosOperation(context, (rotateAllServosOperation) semanticObject); 
				return; 
			case OperationsPackage.ROTATE_SERVO_OPERATION:
				sequence_rotateServoOperation(context, (rotateServoOperation) semanticObject); 
				return; 
			case OperationsPackage.SERVO:
				sequence_servo(context, (servo) semanticObject); 
				return; 
			case OperationsPackage.TIME:
				sequence_time(context, (time) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (name=STRING when=Initial given=Operation then=Solution and1=Conditions)
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CPTesterPackage.Literals.SCENARIO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPTesterPackage.Literals.SCENARIO__NAME));
			if (transientValues.isValueTransient(semanticObject, CPTesterPackage.Literals.SCENARIO__WHEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPTesterPackage.Literals.SCENARIO__WHEN));
			if (transientValues.isValueTransient(semanticObject, CPTesterPackage.Literals.SCENARIO__GIVEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPTesterPackage.Literals.SCENARIO__GIVEN));
			if (transientValues.isValueTransient(semanticObject, CPTesterPackage.Literals.SCENARIO__THEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPTesterPackage.Literals.SCENARIO__THEN));
			if (transientValues.isValueTransient(semanticObject, CPTesterPackage.Literals.SCENARIO__AND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPTesterPackage.Literals.SCENARIO__AND1));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScenarioAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getScenarioAccess().getWhenInitialParserRuleCall_3_0(), semanticObject.getWhen());
		feeder.accept(grammarAccess.getScenarioAccess().getGivenOperationParserRuleCall_5_0(), semanticObject.getGiven());
		feeder.accept(grammarAccess.getScenarioAccess().getThenSolutionParserRuleCall_7_0(), semanticObject.getThen());
		feeder.accept(grammarAccess.getScenarioAccess().getAnd1ConditionsParserRuleCall_9_0(), semanticObject.getAnd1());
		feeder.finish();
	}
	
	
}
