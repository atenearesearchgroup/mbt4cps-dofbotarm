/**
 * generated by Xtext 2.26.0
 */
package org.xtext.cPTester;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

import org.xtext.condition.Conditions;

import org.xtext.solution.Solution;
import org.xtext.solution.State;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>And</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.cPTester.And#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.cPTester.And#getConditions <em>Conditions</em>}</li>
 *   <li>{@link org.xtext.cPTester.And#getSolution <em>Solution</em>}</li>
 *   <li>{@link org.xtext.cPTester.And#getState <em>State</em>}</li>
 * </ul>
 *
 * @see org.xtext.cPTester.CPTesterPackage#getAnd()
 * @model
 * @generated
 */
public interface And extends EObject
{
  /**
   * Returns the value of the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Name</em>' attribute.
   * @see #setName(String)
   * @see org.xtext.cPTester.CPTesterPackage#getAnd_Name()
   * @model
   * @generated
   */
  String getName();

  /**
   * Sets the value of the '{@link org.xtext.cPTester.And#getName <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Name</em>' attribute.
   * @see #getName()
   * @generated
   */
  void setName(String value);

  /**
   * Returns the value of the '<em><b>Conditions</b></em>' containment reference list.
   * The list contents are of type {@link org.xtext.condition.Conditions}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Conditions</em>' containment reference list.
   * @see org.xtext.cPTester.CPTesterPackage#getAnd_Conditions()
   * @model containment="true"
   * @generated
   */
  EList<Conditions> getConditions();

  /**
   * Returns the value of the '<em><b>Solution</b></em>' containment reference list.
   * The list contents are of type {@link org.xtext.solution.Solution}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Solution</em>' containment reference list.
   * @see org.xtext.cPTester.CPTesterPackage#getAnd_Solution()
   * @model containment="true"
   * @generated
   */
  EList<Solution> getSolution();

  /**
   * Returns the value of the '<em><b>State</b></em>' attribute.
   * The literals are from the enumeration {@link org.xtext.solution.State}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>State</em>' attribute.
   * @see org.xtext.solution.State
   * @see #setState(State)
   * @see org.xtext.cPTester.CPTesterPackage#getAnd_State()
   * @model
   * @generated
   */
  State getState();

  /**
   * Sets the value of the '{@link org.xtext.cPTester.And#getState <em>State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>State</em>' attribute.
   * @see org.xtext.solution.State
   * @see #getState()
   * @generated
   */
  void setState(State value);

} // And
