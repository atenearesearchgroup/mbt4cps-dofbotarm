/*
 * generated by Xtext 2.26.0
 */
grammar InternalCPTester;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.CPTesterGrammarAccess;

}

@parser::members {

 	private CPTesterGrammarAccess grammarAccess;

    public InternalCPTesterParser(TokenStream input, CPTesterGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Scenario";
   	}

   	@Override
   	protected CPTesterGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	iv_ruleScenario=ruleScenario
	{ $current=$iv_ruleScenario.current; }
	EOF;

// Rule Scenario
ruleScenario returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SCENARIO'
		{
			newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getSCENARIOKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getScenarioAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScenarioRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='WHEN'
		{
			newLeafNode(otherlv_2, grammarAccess.getScenarioAccess().getWHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getWhenOperationParserRuleCall_3_0());
				}
				lv_when_3_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					set(
						$current,
						"when",
						lv_when_3_0,
						"org.xtext.Operations.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='GIVEN'
		{
			newLeafNode(otherlv_4, grammarAccess.getScenarioAccess().getGIVENKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getGivenOperationParserRuleCall_5_0());
				}
				lv_given_5_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					set(
						$current,
						"given",
						lv_given_5_0,
						"org.xtext.Operations.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='THEN'
		{
			newLeafNode(otherlv_6, grammarAccess.getScenarioAccess().getTHENKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getThenResultParserRuleCall_7_0());
				}
				lv_then_7_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					set(
						$current,
						"then",
						lv_then_7_0,
						"org.xtext.Operations.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='AND'
		{
			newLeafNode(otherlv_8, grammarAccess.getScenarioAccess().getANDKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getAnd1OperationParserRuleCall_9_0());
				}
				lv_and1_9_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					set(
						$current,
						"and1",
						lv_and1_9_0,
						"org.xtext.Operations.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getRotateServoOperationParserRuleCall_0());
		}
		this_rotateServoOperation_0=rulerotateServoOperation
		{
			$current = $this_rotateServoOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getOperationalArmParserRuleCall_1());
		}
		this_OperationalArm_1=ruleOperationalArm
		{
			$current = $this_OperationalArm_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getNotLaterThanParserRuleCall_2());
		}
		this_NotLaterThan_2=ruleNotLaterThan
		{
			$current = $this_NotLaterThan_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerotateServoOperation
entryRulerotateServoOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateServoOperationRule()); }
	iv_rulerotateServoOperation=rulerotateServoOperation
	{ $current=$iv_rulerotateServoOperation.current; }
	EOF;

// Rule rotateServoOperation
rulerotateServoOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='rotateServoOperation('
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRotateServoOperationAccess().getNameRotateServoOperationKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateServoOperationRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "rotateServoOperation(");
				}
			)
		)+
		(
			this_INT_1=RULE_INT
			{
				newLeafNode(this_INT_1, grammarAccess.getRotateServoOperationAccess().getINTTerminalRuleCall_1());
			}
		)+
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getRotateServoOperationAccess().getCommaKeyword_2());
			}
		)+
		(
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getRotateServoOperationAccess().getINTTerminalRuleCall_3());
			}
		)+
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getRotateServoOperationAccess().getCommaKeyword_4());
			}
		)+
		(
			this_INT_5=RULE_INT
			{
				newLeafNode(this_INT_5, grammarAccess.getRotateServoOperationAccess().getINTTerminalRuleCall_5());
			}
		)+
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getRotateServoOperationAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleOperationalArm
entryRuleOperationalArm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationalArmRule()); }
	iv_ruleOperationalArm=ruleOperationalArm
	{ $current=$iv_ruleOperationalArm.current; }
	EOF;

// Rule OperationalArm
ruleOperationalArm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='OperationalArm('
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOperationalArmAccess().getNameOperationalArmKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationalArmRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "OperationalArm(");
				}
			)
		)+
		(
			this_INT_1=RULE_INT
			{
				newLeafNode(this_INT_1, grammarAccess.getOperationalArmAccess().getINTTerminalRuleCall_1());
			}
		)+
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationalArmAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleNotLaterThan
entryRuleNotLaterThan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotLaterThanRule()); }
	iv_ruleNotLaterThan=ruleNotLaterThan
	{ $current=$iv_ruleNotLaterThan.current; }
	EOF;

// Rule NotLaterThan
ruleNotLaterThan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='NotLaterThan('
				{
					newLeafNode(lv_name_0_0, grammarAccess.getNotLaterThanAccess().getNameNotLaterThanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotLaterThanRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "NotLaterThan(");
				}
			)
		)+
		(
			this_INT_1=RULE_INT
			{
				newLeafNode(this_INT_1, grammarAccess.getNotLaterThanAccess().getINTTerminalRuleCall_1());
			}
		)+
		(
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getNotLaterThanAccess().getRightParenthesisKeyword_2());
			}
		)+
		(
			otherlv_3=' Query '
			{
				newLeafNode(otherlv_3, grammarAccess.getNotLaterThanAccess().getQueryKeyword_3());
			}
		)+
		(
			otherlv_4='isAtSingleOperation('
			{
				newLeafNode(otherlv_4, grammarAccess.getNotLaterThanAccess().getIsAtSingleOperationKeyword_4());
			}
		)+
		(
			this_INT_5=RULE_INT
			{
				newLeafNode(this_INT_5, grammarAccess.getNotLaterThanAccess().getINTTerminalRuleCall_5());
			}
		)+
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getNotLaterThanAccess().getCommaKeyword_6());
			}
		)+
		(
			this_INT_7=RULE_INT
			{
				newLeafNode(this_INT_7, grammarAccess.getNotLaterThanAccess().getINTTerminalRuleCall_7());
			}
		)+
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getNotLaterThanAccess().getCommaKeyword_8());
			}
		)+
		(
			this_INT_9=RULE_INT
			{
				newLeafNode(this_INT_9, grammarAccess.getNotLaterThanAccess().getINTTerminalRuleCall_9());
			}
		)+
		(
			otherlv_10=')='
			{
				newLeafNode(otherlv_10, grammarAccess.getNotLaterThanAccess().getRightParenthesisEqualsSignKeyword_10());
			}
		)+
		otherlv_11='True'
		{
			newLeafNode(otherlv_11, grammarAccess.getNotLaterThanAccess().getTrueKeyword_11());
		}
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='result='
				{
					newLeafNode(lv_name_0_0, grammarAccess.getResultAccess().getNameResultKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResultRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "result=");
				}
			)
		)+
		this_INT_1=RULE_INT
		{
			newLeafNode(this_INT_1, grammarAccess.getResultAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
