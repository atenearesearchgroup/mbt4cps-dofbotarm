/*
 * generated by Xtext 2.26.0
 */
grammar InternalCPTester;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.CPTesterGrammarAccess;

}

@parser::members {

 	private CPTesterGrammarAccess grammarAccess;

    public InternalCPTesterParser(TokenStream input, CPTesterGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Scenario";
   	}

   	@Override
   	protected CPTesterGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	iv_ruleScenario=ruleScenario
	{ $current=$iv_ruleScenario.current; }
	EOF;

// Rule Scenario
ruleScenario returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Scenario'
		{
			newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getScenarioKeyword_0());
		}
		(
			(
				lv_surname_1_0=RULE_STRING
				{
					newLeafNode(lv_surname_1_0, grammarAccess.getScenarioAccess().getSurnameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScenarioRule());
					}
					setWithLastConsumed(
						$current,
						"surname",
						lv_surname_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getScenarioAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getOperationsOperationParserRuleCall_3_0());
				}
				lv_operations_3_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					add(
						$current,
						"operations",
						lv_operations_3_0,
						"org.xtext.CPTester.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getScenarioAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getGivenParserRuleCall_0());
		}
		this_Given_0=ruleGiven
		{
			$current = $this_Given_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getWhenParserRuleCall_1());
		}
		this_When_1=ruleWhen
		{
			$current = $this_When_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getThenParserRuleCall_2());
		}
		this_Then_2=ruleThen
		{
			$current = $this_Then_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getAndParserRuleCall_3());
		}
		this_And_3=ruleAnd
		{
			$current = $this_And_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGiven
entryRuleGiven returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGivenRule()); }
	iv_ruleGiven=ruleGiven
	{ $current=$iv_ruleGiven.current; }
	EOF;

// Rule Given
ruleGiven returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='GIVEN'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getGivenAccess().getNameGIVENKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGivenRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "GIVEN");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGivenAccess().getInitialInitialParserRuleCall_1_0());
				}
				lv_initial_1_0=ruleInitial
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGivenRule());
					}
					add(
						$current,
						"initial",
						lv_initial_1_0,
						"org.xtext.CPTester.Initial");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitial
entryRuleInitial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialRule()); }
	iv_ruleInitial=ruleInitial
	{ $current=$iv_ruleInitial.current; }
	EOF;

// Rule Initial
ruleInitial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='posInicial'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getInitialAccess().getNamePosInicialKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "posInicial");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getTimeTimeParserRuleCall_2_0());
				}
				lv_time_2_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					add(
						$current,
						"time",
						lv_time_2_0,
						"org.xtext.CPTester.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getInitialAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleWhen
entryRuleWhen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhenRule()); }
	iv_ruleWhen=ruleWhen
	{ $current=$iv_ruleWhen.current; }
	EOF;

// Rule When
ruleWhen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='WHEN'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getWhenAccess().getNameWHENKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWhenRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "WHEN");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenAccess().getCommandCommandParserRuleCall_1_0());
				}
				lv_command_1_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenRule());
					}
					add(
						$current,
						"command",
						lv_command_1_0,
						"org.xtext.CPTester.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRotateServoParserRuleCall_0());
		}
		this_rotateServo_0=rulerotateServo
		{
			$current = $this_rotateServo_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRotateAllServosParserRuleCall_1());
		}
		this_rotateAllServos_1=rulerotateAllServos
		{
			$current = $this_rotateAllServos_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerotateServo
entryRulerotateServo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateServoRule()); }
	iv_rulerotateServo=rulerotateServo
	{ $current=$iv_rulerotateServo.current; }
	EOF;

// Rule rotateServo
rulerotateServo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='rotateServo'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRotateServoAccess().getNameRotateServoKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateServoRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "rotateServo");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRotateServoAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateServoAccess().getServoServoParserRuleCall_2_0());
				}
				lv_servo_2_0=ruleServo
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateServoRule());
					}
					add(
						$current,
						"servo",
						lv_servo_2_0,
						"org.xtext.CPTester.Servo");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getRotateServoAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateServoAccess().getAngleAngleParserRuleCall_4_0());
				}
				lv_angle_4_0=ruleAngle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateServoRule());
					}
					add(
						$current,
						"angle",
						lv_angle_4_0,
						"org.xtext.CPTester.Angle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getRotateServoAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateServoAccess().getTimeTimeParserRuleCall_6_0());
				}
				lv_time_6_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateServoRule());
					}
					add(
						$current,
						"time",
						lv_time_6_0,
						"org.xtext.CPTester.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getRotateServoAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRulerotateAllServos
entryRulerotateAllServos returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateAllServosRule()); }
	iv_rulerotateAllServos=rulerotateAllServos
	{ $current=$iv_rulerotateAllServos.current; }
	EOF;

// Rule rotateAllServos
rulerotateAllServos returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='rotateAllServos'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRotateAllServosAccess().getNameRotateAllServosKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateAllServosRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "rotateAllServos");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRotateAllServosAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateAllServosAccess().getAngleAngleParserRuleCall_2_0());
				}
				lv_angle_2_0=ruleAngle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateAllServosRule());
					}
					add(
						$current,
						"angle",
						lv_angle_2_0,
						"org.xtext.CPTester.Angle");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getRotateAllServosAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateAllServosAccess().getTimeTimeParserRuleCall_4_0());
				}
				lv_time_4_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateAllServosRule());
					}
					add(
						$current,
						"time",
						lv_time_4_0,
						"org.xtext.CPTester.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRotateAllServosAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleThen
entryRuleThen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThenRule()); }
	iv_ruleThen=ruleThen
	{ $current=$iv_ruleThen.current; }
	EOF;

// Rule Then
ruleThen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='THEN'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getThenAccess().getNameTHENKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThenRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "THEN");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getThenAccess().getResultResultParserRuleCall_1_0());
				}
				lv_result_1_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThenRule());
					}
					add(
						$current,
						"result",
						lv_result_1_0,
						"org.xtext.CPTester.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='result'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getResultAccess().getNameResultKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResultRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "result");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getResultAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getResultAccess().getTimeTimeParserRuleCall_2_0());
				}
				lv_time_2_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultRule());
					}
					add(
						$current,
						"time",
						lv_time_2_0,
						"org.xtext.CPTester.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getResultAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='AND'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAndAccess().getNameANDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAndRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "AND");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getConditionsConditionsParserRuleCall_1_0());
				}
				lv_conditions_1_0=ruleConditions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_1_0,
						"org.xtext.CPTester.Conditions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleConditions
entryRuleConditions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionsRule()); }
	iv_ruleConditions=ruleConditions
	{ $current=$iv_ruleConditions.current; }
	EOF;

// Rule Conditions
ruleConditions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionsAccess().getNotLaterThanParserRuleCall_0());
		}
		this_NotLaterThan_0=ruleNotLaterThan
		{
			$current = $this_NotLaterThan_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionsAccess().getIsAtSingleParserRuleCall_1());
		}
		this_isAtSingle_1=ruleisAtSingle
		{
			$current = $this_isAtSingle_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionsAccess().getIsAtParserRuleCall_2());
		}
		this_isAt_2=ruleisAt
		{
			$current = $this_isAt_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNotLaterThan
entryRuleNotLaterThan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotLaterThanRule()); }
	iv_ruleNotLaterThan=ruleNotLaterThan
	{ $current=$iv_ruleNotLaterThan.current; }
	EOF;

// Rule NotLaterThan
ruleNotLaterThan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='NotLaterThan'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getNotLaterThanAccess().getNameNotLaterThanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotLaterThanRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "NotLaterThan");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getNotLaterThanAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotLaterThanAccess().getTimeTimeParserRuleCall_2_0());
				}
				lv_time_2_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotLaterThanRule());
					}
					add(
						$current,
						"time",
						lv_time_2_0,
						"org.xtext.CPTester.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNotLaterThanAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleisAtSingle
entryRuleisAtSingle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsAtSingleRule()); }
	iv_ruleisAtSingle=ruleisAtSingle
	{ $current=$iv_ruleisAtSingle.current; }
	EOF;

// Rule isAtSingle
ruleisAtSingle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='isAtSingle'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIsAtSingleAccess().getNameIsAtSingleKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIsAtSingleRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "isAtSingle");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIsAtSingleAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsAtSingleAccess().getServoServoParserRuleCall_2_0());
				}
				lv_servo_2_0=ruleServo
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsAtSingleRule());
					}
					add(
						$current,
						"servo",
						lv_servo_2_0,
						"org.xtext.CPTester.Servo");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getIsAtSingleAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsAtSingleAccess().getAngleAngleParserRuleCall_4_0());
				}
				lv_angle_4_0=ruleAngle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsAtSingleRule());
					}
					add(
						$current,
						"angle",
						lv_angle_4_0,
						"org.xtext.CPTester.Angle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getIsAtSingleAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsAtSingleAccess().getAngle_resAngle_resParserRuleCall_6_0());
				}
				lv_angle_res_6_0=ruleAngle_res
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsAtSingleRule());
					}
					add(
						$current,
						"angle_res",
						lv_angle_res_6_0,
						"org.xtext.CPTester.Angle_res");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getIsAtSingleAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleisAt
entryRuleisAt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsAtRule()); }
	iv_ruleisAt=ruleisAt
	{ $current=$iv_ruleisAt.current; }
	EOF;

// Rule isAt
ruleisAt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='isAt'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIsAtAccess().getNameIsAtKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIsAtRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "isAt");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIsAtAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsAtAccess().getAngleAngleParserRuleCall_2_0());
				}
				lv_angle_2_0=ruleAngle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsAtRule());
					}
					add(
						$current,
						"angle",
						lv_angle_2_0,
						"org.xtext.CPTester.Angle");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getIsAtAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsAtAccess().getAngle_resAngle_resParserRuleCall_4_0());
				}
				lv_angle_res_4_0=ruleAngle_res
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsAtRule());
					}
					add(
						$current,
						"angle_res",
						lv_angle_res_4_0,
						"org.xtext.CPTester.Angle_res");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getIsAtAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleAngle_res
entryRuleAngle_res returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAngle_resRule()); }
	iv_ruleAngle_res=ruleAngle_res
	{ $current=$iv_ruleAngle_res.current; }
	EOF;

// Rule Angle_res
ruleAngle_res returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_angle_res_0_0=RULE_INT
			{
				newLeafNode(lv_angle_res_0_0, grammarAccess.getAngle_resAccess().getAngle_resINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAngle_resRule());
				}
				setWithLastConsumed(
					$current,
					"angle_res",
					lv_angle_res_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleServo
entryRuleServo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServoRule()); }
	iv_ruleServo=ruleServo
	{ $current=$iv_ruleServo.current; }
	EOF;

// Rule Servo
ruleServo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_servo_0_0=RULE_INT
			{
				newLeafNode(lv_servo_0_0, grammarAccess.getServoAccess().getServoINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getServoRule());
				}
				setWithLastConsumed(
					$current,
					"servo",
					lv_servo_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleAngle
entryRuleAngle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAngleRule()); }
	iv_ruleAngle=ruleAngle
	{ $current=$iv_ruleAngle.current; }
	EOF;

// Rule Angle
ruleAngle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_angle_0_0=RULE_INT
			{
				newLeafNode(lv_angle_0_0, grammarAccess.getAngleAccess().getAngleINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAngleRule());
				}
				setWithLastConsumed(
					$current,
					"angle",
					lv_angle_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_time_0_0=RULE_INT
			{
				newLeafNode(lv_time_0_0, grammarAccess.getTimeAccess().getTimeINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTimeRule());
				}
				setWithLastConsumed(
					$current,
					"time",
					lv_time_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
